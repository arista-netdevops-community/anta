{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ANTA Documentation \u00b6 This section provides generic documentation related to the Arista Network Test Automation framework (ANTA) User documentation \u00b6 requirements-and-installation.md : This file provides instructions about the requirements and installation procedure. usage.md : Command usages demo.md : This file content full output of commands provided by ANTA package. Automated documentation \u00b6 ANTA documentation overview : It is an overview of the ANTA Python package documentation in markdown format. It is generated by the script generate-functions-documentation.py and the docstrings in the python package ANTA . api/tests.md : It is the ANTA Python package detailled documentation in markdown format. It is generated by the script generate-functions-documentation.py and the docstrings in the python package ANTA . generate-functions-documentation.py : The functions to test EOS devices are coded in the python package ANTA . These functions have docstrings. These docstrings are used by the script generate-functions-documentation.py to generate the functions documentation in markdown format in the directory api . This requires the installation of the python package lazydocs that is indicated in the file requirements-dev.txt","title":"Home"},{"location":"#anta-documentation","text":"This section provides generic documentation related to the Arista Network Test Automation framework (ANTA)","title":"ANTA Documentation"},{"location":"#user-documentation","text":"requirements-and-installation.md : This file provides instructions about the requirements and installation procedure. usage.md : Command usages demo.md : This file content full output of commands provided by ANTA package.","title":"User documentation"},{"location":"#automated-documentation","text":"ANTA documentation overview : It is an overview of the ANTA Python package documentation in markdown format. It is generated by the script generate-functions-documentation.py and the docstrings in the python package ANTA . api/tests.md : It is the ANTA Python package detailled documentation in markdown format. It is generated by the script generate-functions-documentation.py and the docstrings in the python package ANTA . generate-functions-documentation.py : The functions to test EOS devices are coded in the python package ANTA . These functions have docstrings. These docstrings are used by the script generate-functions-documentation.py to generate the functions documentation in markdown format in the directory api . This requires the installation of the python package lazydocs that is indicated in the file requirements-dev.txt","title":"Automated documentation"},{"location":"demo/","text":"Devices testing demo \u00b6 To test devices, once you are done with the installation, you simply need: A text file with your devices hostname or IP address. Here\u2019s an example . A YAML file with the tests you would like to run. Some tests require an argument. Here\u2019s an example . Then you can run the Python script check-devices.py : ./check-devices.py --help usage: check-devices.py [-h] -i INVENTORY_FILE -u USERNAME -t TEST_CATALOG -o OUTPUT_FILE EOS devices health checks optional arguments: -h, --help show this help message and exit -i INVENTORY_FILE Text file containing a list of switches, one per line -u USERNAME Devices username -t TEST_CATALOG Text file containing the tests -o OUTPUT_FILE Output file ./check-devices.py -u arista -i devices.txt -o output.txt -t tests.yaml Device password: Enable password (if any): Testing devices .... please be patient ... Can not connect to device 2.2.2.2 Running tests on device 10.73.1.101 ... Running tests on device 10.73.1.102 ... Running tests on device 10.73.1.106 ... Test results are saved on output.txt Then you can check the tests result in the output file: $ cat output.txt Mon Apr 11 19:12:58 2022 devices inventory file was devices.txt devices username was arista list of unreachable devices is 2.2.2.2 tests file was tests.yaml ***** Results ***** +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 01.01 | 01.02 | 01.03 | 01.04 | 02.01 | 02.02 | 02.03 | 02.04 | 02.05 | 02.06 | 02.07 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Fail | Pass | Pass | Pass | Pass | Skip | Pass | Fail | Fail | Pass | Pass | | 10.73.1.102 | Fail | Pass | Pass | Pass | Pass | Skip | Pass | Pass | Fail | Pass | Pass | | 10.73.1.106 | Fail | Pass | Pass | Pass | Pass | Skip | Pass | Pass | Fail | Pass | Pass | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 02.08 | 03.01 | 03.02 | 03.03 | 03.04 | 03.05 | 04.01 | 04.02 | 05.01 | 05.02 | 06.01 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Pass | Skip | Fail | Pass | Fail | Skip | Pass | Fail | Skip | Skip | Skip | | 10.73.1.102 | Pass | Skip | Fail | Pass | Fail | Skip | Pass | Fail | Skip | Skip | Skip | | 10.73.1.106 | Pass | Skip | Fail | Pass | Fail | Skip | Pass | Fail | Skip | Skip | Skip | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 07.01 | 08.01 | 08.02 | 08.03 | 08.04 | 08.05 | 08.06 | 09.01 | 09.02 | 09.03 | 09.04 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Pass | Pass | Pass | Pass | Pass | Pass | Skip | Skip | Skip | Skip | Skip | | 10.73.1.102 | Pass | Pass | Pass | Pass | Pass | Pass | Skip | Skip | Skip | Skip | Skip | | 10.73.1.106 | Pass | Pass | Pass | Pass | Pass | Pass | Skip | Fail | Pass | Pass | Fail | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 09.05 | 10.01 | 11.01 | 11.02 | 12.01 | 13.01 | 14.01 | 14.02 | 15.01 | 16.01 | 16.02 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Skip | Fail | Fail | Skip | Pass | Pass | Pass | Fail | Pass | Pass | Fail | | 10.73.1.102 | Skip | Fail | Fail | Skip | Pass | Pass | Pass | Fail | Pass | Pass | Fail | | 10.73.1.106 | Skip | Fail | Pass | Fail | Pass | Pass | Pass | Fail | Pass | Pass | Fail | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 16.03 | 16.04 | 16.05 | 16.06 | 16.07 | 17.01 | 17.02 | 18.01 | 18.02 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Pass | Pass | Fail | Skip | Skip | Pass | Fail | Skip | Pass | | 10.73.1.102 | Pass | Pass | Fail | Skip | Skip | Pass | Fail | Skip | Pass | | 10.73.1.106 | Pass | Pass | Pass | Skip | Skip | Pass | Fail | Skip | Pass | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ ***** Tests ***** 01.01 {\"name\": \"verify_eos_version\", \"versions\": [\"4.25.4M\", \"4.26.1F\"]} 01.02 {\"name\": \"verify_terminattr_version\", \"versions\": [\"v1.13.6\", \"v1.8.0\"]} 01.03 {\"name\": \"verify_eos_extensions\"} 01.04 {\"name\": \"verify_field_notice_44_resolution\"} 02.01 {\"name\": \"verify_uptime\", \"minimum\": 86400} 02.02 {\"name\": \"verify_reload_cause\"} 02.03 {\"name\": \"verify_coredump\"} 02.04 {\"name\": \"verify_agent_logs\"} 02.05 {\"name\": \"verify_syslog\"} 02.06 {\"name\": \"verify_cpu_utilization\"} 02.07 {\"name\": \"verify_memory_utilization\"} 02.08 {\"name\": \"verify_filesystem_utilization\"} 03.01 {\"name\": \"verify_transceivers_manufacturers\", \"manufacturers\": [\"Not Present\", \"Arista Networks\", \"Arastra, Inc.\"]} 03.02 {\"name\": \"verify_system_temperature\"} 03.03 {\"name\": \"verify_transceiver_temperature\"} 03.04 {\"name\": \"verify_environment_cooling\"} 03.05 {\"name\": \"verify_environment_power\"} 04.01 {\"name\": \"verify_zerotouch\"} 04.02 {\"name\": \"verify_running_config_diffs\"} 05.01 {\"name\": \"verify_unified_forwarding_table_mode\", \"mode\": 3} 05.02 {\"name\": \"verify_tcam_profile\", \"profile\": \"vxlan-routing\"} 06.01 {\"name\": \"verify_adverse_drops\"} 07.01 {\"name\": \"verify_ntp\"} 08.01 {\"name\": \"verify_interface_utilization\"} 08.02 {\"name\": \"verify_interface_errors\"} 08.03 {\"name\": \"verify_interface_discards\"} 08.04 {\"name\": \"verify_interface_errdisabled\"} 08.05 {\"name\": \"verify_interfaces_status\", \"minimum\": 4} 08.06 {\"name\": \"verify_storm_control_drops\"} 09.01 {\"name\": \"verify_portchannels\"} 09.02 {\"name\": \"verify_illegal_lacp\"} 09.03 {\"name\": \"verify_mlag_status\"} 09.04 {\"name\": \"verify_mlag_interfaces\"} 09.05 {\"name\": \"verify_mlag_config_sanity\"} 10.01 {\"name\": \"verify_loopback_count\", \"number\": 3} 11.01 {\"name\": \"verify_vxlan\"} 11.02 {\"name\": \"verify_vxlan_config_sanity\"} 12.01 {\"name\": \"verify_svi\"} 13.01 {\"name\": \"verify_spanning_tree_blocked_ports\"} 14.01 {\"name\": \"verify_routing_protocol_model\", \"model\": \"multi-agent\"} 14.02 {\"name\": \"verify_routing_table_size\", \"minimum\": 2, \"maximum\": 20} 15.01 {\"name\": \"verify_bfd\"} 16.01 {\"name\": \"verify_bgp_ipv4_unicast_state\"} 16.02 {\"name\": \"verify_bgp_ipv4_unicast_count\", \"number\": 2, \"vrf\": \"default\"} 16.03 {\"name\": \"verify_bgp_ipv6_unicast_state\"} 16.04 {\"name\": \"verify_bgp_evpn_state\"} 16.05 {\"name\": \"verify_bgp_evpn_count\", \"number\": 2} 16.06 {\"name\": \"verify_bgp_rtc_state\"} 16.07 {\"name\": \"verify_bgp_rtc_count\", \"number\": 2} 17.01 {\"name\": \"verify_ospf_state\"} 17.02 {\"name\": \"verify_ospf_count\", \"number\": 3} 18.01 {\"name\": \"verify_igmp_snooping_vlans\", \"configuration\": \"disabled\", \"vlans\": [10, 12]} 18.02 {\"name\": \"verify_igmp_snooping_global\", \"configuration\": \"enabled\"}","title":"Devices testing demo"},{"location":"demo/#devices-testing-demo","text":"To test devices, once you are done with the installation, you simply need: A text file with your devices hostname or IP address. Here\u2019s an example . A YAML file with the tests you would like to run. Some tests require an argument. Here\u2019s an example . Then you can run the Python script check-devices.py : ./check-devices.py --help usage: check-devices.py [-h] -i INVENTORY_FILE -u USERNAME -t TEST_CATALOG -o OUTPUT_FILE EOS devices health checks optional arguments: -h, --help show this help message and exit -i INVENTORY_FILE Text file containing a list of switches, one per line -u USERNAME Devices username -t TEST_CATALOG Text file containing the tests -o OUTPUT_FILE Output file ./check-devices.py -u arista -i devices.txt -o output.txt -t tests.yaml Device password: Enable password (if any): Testing devices .... please be patient ... Can not connect to device 2.2.2.2 Running tests on device 10.73.1.101 ... Running tests on device 10.73.1.102 ... Running tests on device 10.73.1.106 ... Test results are saved on output.txt Then you can check the tests result in the output file: $ cat output.txt Mon Apr 11 19:12:58 2022 devices inventory file was devices.txt devices username was arista list of unreachable devices is 2.2.2.2 tests file was tests.yaml ***** Results ***** +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 01.01 | 01.02 | 01.03 | 01.04 | 02.01 | 02.02 | 02.03 | 02.04 | 02.05 | 02.06 | 02.07 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Fail | Pass | Pass | Pass | Pass | Skip | Pass | Fail | Fail | Pass | Pass | | 10.73.1.102 | Fail | Pass | Pass | Pass | Pass | Skip | Pass | Pass | Fail | Pass | Pass | | 10.73.1.106 | Fail | Pass | Pass | Pass | Pass | Skip | Pass | Pass | Fail | Pass | Pass | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 02.08 | 03.01 | 03.02 | 03.03 | 03.04 | 03.05 | 04.01 | 04.02 | 05.01 | 05.02 | 06.01 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Pass | Skip | Fail | Pass | Fail | Skip | Pass | Fail | Skip | Skip | Skip | | 10.73.1.102 | Pass | Skip | Fail | Pass | Fail | Skip | Pass | Fail | Skip | Skip | Skip | | 10.73.1.106 | Pass | Skip | Fail | Pass | Fail | Skip | Pass | Fail | Skip | Skip | Skip | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 07.01 | 08.01 | 08.02 | 08.03 | 08.04 | 08.05 | 08.06 | 09.01 | 09.02 | 09.03 | 09.04 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Pass | Pass | Pass | Pass | Pass | Pass | Skip | Skip | Skip | Skip | Skip | | 10.73.1.102 | Pass | Pass | Pass | Pass | Pass | Pass | Skip | Skip | Skip | Skip | Skip | | 10.73.1.106 | Pass | Pass | Pass | Pass | Pass | Pass | Skip | Fail | Pass | Pass | Fail | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 09.05 | 10.01 | 11.01 | 11.02 | 12.01 | 13.01 | 14.01 | 14.02 | 15.01 | 16.01 | 16.02 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Skip | Fail | Fail | Skip | Pass | Pass | Pass | Fail | Pass | Pass | Fail | | 10.73.1.102 | Skip | Fail | Fail | Skip | Pass | Pass | Pass | Fail | Pass | Pass | Fail | | 10.73.1.106 | Skip | Fail | Pass | Fail | Pass | Pass | Pass | Fail | Pass | Pass | Fail | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | devices | 16.03 | 16.04 | 16.05 | 16.06 | 16.07 | 17.01 | 17.02 | 18.01 | 18.02 | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ | 10.73.1.101 | Pass | Pass | Fail | Skip | Skip | Pass | Fail | Skip | Pass | | 10.73.1.102 | Pass | Pass | Fail | Skip | Skip | Pass | Fail | Skip | Pass | | 10.73.1.106 | Pass | Pass | Pass | Skip | Skip | Pass | Fail | Skip | Pass | +---------------+---------+---------+---------+---------+---------+---------+---------+---------+---------+ ***** Tests ***** 01.01 {\"name\": \"verify_eos_version\", \"versions\": [\"4.25.4M\", \"4.26.1F\"]} 01.02 {\"name\": \"verify_terminattr_version\", \"versions\": [\"v1.13.6\", \"v1.8.0\"]} 01.03 {\"name\": \"verify_eos_extensions\"} 01.04 {\"name\": \"verify_field_notice_44_resolution\"} 02.01 {\"name\": \"verify_uptime\", \"minimum\": 86400} 02.02 {\"name\": \"verify_reload_cause\"} 02.03 {\"name\": \"verify_coredump\"} 02.04 {\"name\": \"verify_agent_logs\"} 02.05 {\"name\": \"verify_syslog\"} 02.06 {\"name\": \"verify_cpu_utilization\"} 02.07 {\"name\": \"verify_memory_utilization\"} 02.08 {\"name\": \"verify_filesystem_utilization\"} 03.01 {\"name\": \"verify_transceivers_manufacturers\", \"manufacturers\": [\"Not Present\", \"Arista Networks\", \"Arastra, Inc.\"]} 03.02 {\"name\": \"verify_system_temperature\"} 03.03 {\"name\": \"verify_transceiver_temperature\"} 03.04 {\"name\": \"verify_environment_cooling\"} 03.05 {\"name\": \"verify_environment_power\"} 04.01 {\"name\": \"verify_zerotouch\"} 04.02 {\"name\": \"verify_running_config_diffs\"} 05.01 {\"name\": \"verify_unified_forwarding_table_mode\", \"mode\": 3} 05.02 {\"name\": \"verify_tcam_profile\", \"profile\": \"vxlan-routing\"} 06.01 {\"name\": \"verify_adverse_drops\"} 07.01 {\"name\": \"verify_ntp\"} 08.01 {\"name\": \"verify_interface_utilization\"} 08.02 {\"name\": \"verify_interface_errors\"} 08.03 {\"name\": \"verify_interface_discards\"} 08.04 {\"name\": \"verify_interface_errdisabled\"} 08.05 {\"name\": \"verify_interfaces_status\", \"minimum\": 4} 08.06 {\"name\": \"verify_storm_control_drops\"} 09.01 {\"name\": \"verify_portchannels\"} 09.02 {\"name\": \"verify_illegal_lacp\"} 09.03 {\"name\": \"verify_mlag_status\"} 09.04 {\"name\": \"verify_mlag_interfaces\"} 09.05 {\"name\": \"verify_mlag_config_sanity\"} 10.01 {\"name\": \"verify_loopback_count\", \"number\": 3} 11.01 {\"name\": \"verify_vxlan\"} 11.02 {\"name\": \"verify_vxlan_config_sanity\"} 12.01 {\"name\": \"verify_svi\"} 13.01 {\"name\": \"verify_spanning_tree_blocked_ports\"} 14.01 {\"name\": \"verify_routing_protocol_model\", \"model\": \"multi-agent\"} 14.02 {\"name\": \"verify_routing_table_size\", \"minimum\": 2, \"maximum\": 20} 15.01 {\"name\": \"verify_bfd\"} 16.01 {\"name\": \"verify_bgp_ipv4_unicast_state\"} 16.02 {\"name\": \"verify_bgp_ipv4_unicast_count\", \"number\": 2, \"vrf\": \"default\"} 16.03 {\"name\": \"verify_bgp_ipv6_unicast_state\"} 16.04 {\"name\": \"verify_bgp_evpn_state\"} 16.05 {\"name\": \"verify_bgp_evpn_count\", \"number\": 2} 16.06 {\"name\": \"verify_bgp_rtc_state\"} 16.07 {\"name\": \"verify_bgp_rtc_count\", \"number\": 2} 17.01 {\"name\": \"verify_ospf_state\"} 17.02 {\"name\": \"verify_ospf_count\", \"number\": 3} 18.01 {\"name\": \"verify_igmp_snooping_vlans\", \"configuration\": \"disabled\", \"vlans\": [10, 12]} 18.02 {\"name\": \"verify_igmp_snooping_global\", \"configuration\": \"enabled\"}","title":"Devices testing demo"},{"location":"requirements-and-installation/","text":"Table of Contents Requirements on your laptop Install the package ANTA and the scripts and the requirements Use the pip install command with the Git URL Clone the repository and install the package Using the pip install . command Using python setup.py commands Clone the repository and install the package in editable mode Clone the repository and use the pip install -r requirements.txt command Update your PATH environment variable if it is required Requirements on the switches Quick checks Requirements on your laptop \u00b6 Python 3 (at least 3.3) is required: python -V Install the package ANTA and the scripts and the requirements \u00b6 ANTA and these scripts require some packages that are not part of the Python standard library. They are indicated in the requirements.txt file There are several ways to installt the ANTA and the scripts and the requirements . This is described below. Use the pip install command with the Git URL \u00b6 Run this command to install: The package ANTA and its dependencies These scripts and the packages they required pip install git+https://github.com/arista-netdevops-community/network-test-automation.git You can even specify the commit you would like to install. Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py To update, run this command: pip install -U git+https://github.com/arista-netdevops-community/network-test-automation.git Clone the repository and install the package \u00b6 Run these commands to clone the repository and to move to the new folder: git clone https://github.com/arista-netdevops-community/network-test-automation.git cd network-test-automation Using the pip install . command \u00b6 Run this command to install: The package ANTA and its dependencies These scripts and the packages they required pip install . Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py Using python setup.py commands \u00b6 Run this command to build the package ANTA : python setup.py build Run this command to install: The package ANTA and its dependencies These scripts and the packages they required python setup.py install Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py Clone the repository and install the package in editable mode \u00b6 python setup.py install is used to install packages that you\u2019re not going to modify yourself. If you want to install the package and then be able to edit the code without having to re-install the package every time for the changes take effect, you can use python setup.py develop you can also use pip install -e . The . refers to the current working directory (the directory where is the setup.py file). The -e flag specifies that we want to install in editable mode, which means that when we edit the files in our package we do not need to re-install the package before the changes come into effect. You will need to reload the package though! Run these commands to install: The package ANTA and its dependencies These scripts and the packages they required git clone https://github.com/arista-netdevops-community/network-test-automation.git cd network-test-automation python setup.py develop or pip install -e . Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py Clone the repository and use the pip install -r requirements.txt command \u00b6 Run these commands to install the packages indicated in the requirements.txt file. git clone https://github.com/arista-netdevops-community/network-test-automation.git cd network-test-automation pip install -r requirements.txt These packages are required by: These scripts The package ANTA But this will not install: The ANTA package These scripts Run this command to verify: pip list Update your PATH environment variable if it is required \u00b6 If the path where the scripts are installed is not yet include in your PATH environment variable, please update it. Here\u2019s an example if the scripts are installed here: ls -l /home/arista/.local/bin/ Run this command to update path to update your PATH environment variable: echo $HOME echo $PATH export PATH = \" $HOME /.local/bin: $PATH \" echo $PATH Requirements on the switches \u00b6 configure interface Management1 description oob_management vrf MGMT ip address 10.73.1.105/24 end Enable eAPI on the MGMT vrf: configure management api http-commands protocol https port 443 no shutdown vrf MGMT no shutdown end Now the swicth accepts on port 443 in the MGMT VRF HTTPS requests containing a list of CLI commands. Run these EOS commands to verify: switch1#show management http-server switch1#show management api http-commands Quick checks \u00b6 Execute this python script to validate: You can import the jsonrpclib library The device reachability using eAPI Use your device credentials and IP address. import ssl from jsonrpclib import Server ssl . _create_default_https_context = ssl . _create_unverified_context USERNAME = \"arista\" PASSWORD = \"aristatwfn\" ENABLE_PASSWORD = \"aristatwfn\" IP = \"192.168.0.12\" URL = f 'https:// { USERNAME } : { PASSWORD } @ { IP } /command-api' switch = Server ( URL ) result = switch . runCmds ( 1 ,[ 'show version' ], 'json' ) print ( result [ 0 ][ 'uptime' ]) Run these python commands to validate you can import and use the ANTA package from anta.tests import * dir () help ( verify_bgp_ipv4_unicast_state ) verify_bgp_ipv4_unicast_state ( switch , ENABLE_PASSWORD ) exit ()","title":"Requirements and installation"},{"location":"requirements-and-installation/#requirements-on-your-laptop","text":"Python 3 (at least 3.3) is required: python -V","title":"Requirements on your laptop"},{"location":"requirements-and-installation/#install-the-package-anta-and-the-scripts-and-the-requirements","text":"ANTA and these scripts require some packages that are not part of the Python standard library. They are indicated in the requirements.txt file There are several ways to installt the ANTA and the scripts and the requirements . This is described below.","title":"Install the package ANTA and the scripts and the requirements"},{"location":"requirements-and-installation/#use-the-pip-install-command-with-the-git-url","text":"Run this command to install: The package ANTA and its dependencies These scripts and the packages they required pip install git+https://github.com/arista-netdevops-community/network-test-automation.git You can even specify the commit you would like to install. Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py To update, run this command: pip install -U git+https://github.com/arista-netdevops-community/network-test-automation.git","title":"Use the pip install command with the Git URL"},{"location":"requirements-and-installation/#clone-the-repository-and-install-the-package","text":"Run these commands to clone the repository and to move to the new folder: git clone https://github.com/arista-netdevops-community/network-test-automation.git cd network-test-automation","title":"Clone the repository and install the package"},{"location":"requirements-and-installation/#using-the-pip-install-command","text":"Run this command to install: The package ANTA and its dependencies These scripts and the packages they required pip install . Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py","title":"Using the pip install . command"},{"location":"requirements-and-installation/#using-python-setuppy-commands","text":"Run this command to build the package ANTA : python setup.py build Run this command to install: The package ANTA and its dependencies These scripts and the packages they required python setup.py install Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py","title":"Using python setup.py commands"},{"location":"requirements-and-installation/#clone-the-repository-and-install-the-package-in-editable-mode","text":"python setup.py install is used to install packages that you\u2019re not going to modify yourself. If you want to install the package and then be able to edit the code without having to re-install the package every time for the changes take effect, you can use python setup.py develop you can also use pip install -e . The . refers to the current working directory (the directory where is the setup.py file). The -e flag specifies that we want to install in editable mode, which means that when we edit the files in our package we do not need to re-install the package before the changes come into effect. You will need to reload the package though! Run these commands to install: The package ANTA and its dependencies These scripts and the packages they required git clone https://github.com/arista-netdevops-community/network-test-automation.git cd network-test-automation python setup.py develop or pip install -e . Run these commands to verify: pip list check-devices-reachability.py --help which check-devices-reachability.py","title":"Clone the repository and install the package in editable mode"},{"location":"requirements-and-installation/#clone-the-repository-and-use-the-pip-install-r-requirementstxt-command","text":"Run these commands to install the packages indicated in the requirements.txt file. git clone https://github.com/arista-netdevops-community/network-test-automation.git cd network-test-automation pip install -r requirements.txt These packages are required by: These scripts The package ANTA But this will not install: The ANTA package These scripts Run this command to verify: pip list","title":"Clone the repository and use the pip install -r requirements.txt command"},{"location":"requirements-and-installation/#update-your-path-environment-variable-if-it-is-required","text":"If the path where the scripts are installed is not yet include in your PATH environment variable, please update it. Here\u2019s an example if the scripts are installed here: ls -l /home/arista/.local/bin/ Run this command to update path to update your PATH environment variable: echo $HOME echo $PATH export PATH = \" $HOME /.local/bin: $PATH \" echo $PATH","title":"Update your PATH environment variable if it is required"},{"location":"requirements-and-installation/#requirements-on-the-switches","text":"configure interface Management1 description oob_management vrf MGMT ip address 10.73.1.105/24 end Enable eAPI on the MGMT vrf: configure management api http-commands protocol https port 443 no shutdown vrf MGMT no shutdown end Now the swicth accepts on port 443 in the MGMT VRF HTTPS requests containing a list of CLI commands. Run these EOS commands to verify: switch1#show management http-server switch1#show management api http-commands","title":"Requirements on the switches"},{"location":"requirements-and-installation/#quick-checks","text":"Execute this python script to validate: You can import the jsonrpclib library The device reachability using eAPI Use your device credentials and IP address. import ssl from jsonrpclib import Server ssl . _create_default_https_context = ssl . _create_unverified_context USERNAME = \"arista\" PASSWORD = \"aristatwfn\" ENABLE_PASSWORD = \"aristatwfn\" IP = \"192.168.0.12\" URL = f 'https:// { USERNAME } : { PASSWORD } @ { IP } /command-api' switch = Server ( URL ) result = switch . runCmds ( 1 ,[ 'show version' ], 'json' ) print ( result [ 0 ][ 'uptime' ]) Run these python commands to validate you can import and use the ANTA package from anta.tests import * dir () help ( verify_bgp_ipv4_unicast_state ) verify_bgp_ipv4_unicast_state ( switch , ENABLE_PASSWORD ) exit ()","title":"Quick checks"},{"location":"usage/","text":"Repository usage \u00b6 Once you are done with the installation, you can use the ANTA package and the scripts . How to use the ANTA package \u00b6 Have a quick look to the package documentation: The overview.md file is an overview of the package documentation The tests.md file is a detailled documentation of the package Instantiate the class Server of jsonrpclib for an EOS device: >>> import ssl >>> from jsonrpclib import Server >>> ssl . _create_default_https_context = ssl . _create_unverified_context >>> USERNAME = \"arista\" >>> PASSWORD = \"aristatwfn\" >>> ENABLE_PASSWORD = \"aristatwfn\" >>> IP = \"192.168.0.12\" >>> URL = f 'https:// { USERNAME } : { PASSWORD } @ { IP } /command-api' >>> switch = Server ( URL ) Here\u2019s how we can import and use the functions of the ANTA package: >>> from anta.tests import * >>> dir () >>> help ( verify_eos_version ) >>> help ( verify_bgp_evpn_state ) >>> help ( verify_interface_discards ) >>> verify_eos_version ( switch , ENABLE_PASSWORD , [ \"4.22.1F\" ]) >>> verify_bgp_ipv4_unicast_state ( switch , ENABLE_PASSWORD ) >>> exit () How to use the scripts \u00b6 How to create an inventory from CVP \u00b6 The python script create-devices-inventory-from-cvp.py create an inventory text file using CVP. Run these commands to get an inventory with all devices IP address. ./create-devices-inventory-from-cvp.py --help ./create-devices-inventory-from-cvp.py -cvp 192 .168.0.5 -u arista -o inventory cat inventory/all.text Run these commands to get an inventory with the IP address of the devices under the container Spine ./create-devices-inventory-from-cvp.py --help ./create-devices-inventory-from-cvp.py -cvp 192 .168.0.5 -u arista -o inventory -c Spine cat inventory/Spine.text How to check devices state \u00b6 The python script check-devices.py uses the python functions defined in the package ANTA to test devices: Update the devices inventory with the devices IP address or hostname Update the file tests.yaml to indicate the tests you would like to run. Some tests require an argument. In that case, provide it using the same YAML file Execute the script check-devices.py Check the tests result in the output file vi devices.txt vi tests.yaml ./check-devices.py --help ./check-devices.py -i devices.txt -t tests.yaml -o output.txt -u username cat output.txt How to test devices reachability \u00b6 The python script check-devices-reachability.py checks the devices reachability using eAPI: Update the devices inventory with the devices IP address or hostname Run the python script check-devices-reachability.py Check the result in the console vi devices.txt ./check-devices-reachability.py --help ./check-devices-reachability.py -i devices.txt -u username How to collect commands output \u00b6 The python script collect-eos-commands.py runs show commands on devices and collects the output: Update the devices inventory with the devices IP address or hostname Update the EOS commands list you would like to collect from the devices in text or JSON format Run the python script collect-eos-commands.py The commands output is saved in the output directory vi devices-list.text vi eos-commands.yaml ./collect-eos-commands.py --help ./collect-eos-commands.py -i devices.txt -c eos-commands.yaml -o outdir -u username ls outdir How to collect the scheduled show tech-support files \u00b6 The python script collect-sheduled-show-tech.py collects the scheduled show tech-support files: Update the devices inventory with the devices IP address or hostname Run the python script collect-sheduled-show-tech.py The files are saved in the output directory vi devices-list.text ./collect-sheduled-show-tech.py --help ./collect-sheduled-show-tech.py -i devices.txt -u username -o outdir ls outdir How to clear counters \u00b6 The python script clear-counters.py clears counters: Update the devices inventory with the devices IP address or hostname Run the python script clear-counters.py vi devices-list.text ./clear-counters.py --help ./clear-counters.py -i devices.txt -u username How to clear the MAC addresses which are blacklisted in EVPN \u00b6 The python script evpn-blacklist-recovery.py clears the MAC addresses which are blacklisted in EVPN: Update the devices inventory with the devices IP address or hostname Run the python script evpn-blacklist-recovery.py vi devices-list.text ./evpn-blacklist-recovery.py --help ./evpn-blacklist-recovery.py -i devices.txt -u username","title":"Repository usage"},{"location":"usage/#repository-usage","text":"Once you are done with the installation, you can use the ANTA package and the scripts .","title":"Repository usage"},{"location":"usage/#how-to-use-the-anta-package","text":"Have a quick look to the package documentation: The overview.md file is an overview of the package documentation The tests.md file is a detailled documentation of the package Instantiate the class Server of jsonrpclib for an EOS device: >>> import ssl >>> from jsonrpclib import Server >>> ssl . _create_default_https_context = ssl . _create_unverified_context >>> USERNAME = \"arista\" >>> PASSWORD = \"aristatwfn\" >>> ENABLE_PASSWORD = \"aristatwfn\" >>> IP = \"192.168.0.12\" >>> URL = f 'https:// { USERNAME } : { PASSWORD } @ { IP } /command-api' >>> switch = Server ( URL ) Here\u2019s how we can import and use the functions of the ANTA package: >>> from anta.tests import * >>> dir () >>> help ( verify_eos_version ) >>> help ( verify_bgp_evpn_state ) >>> help ( verify_interface_discards ) >>> verify_eos_version ( switch , ENABLE_PASSWORD , [ \"4.22.1F\" ]) >>> verify_bgp_ipv4_unicast_state ( switch , ENABLE_PASSWORD ) >>> exit ()","title":"How to use the ANTA package"},{"location":"usage/#how-to-use-the-scripts","text":"","title":"How to use the scripts"},{"location":"usage/#how-to-create-an-inventory-from-cvp","text":"The python script create-devices-inventory-from-cvp.py create an inventory text file using CVP. Run these commands to get an inventory with all devices IP address. ./create-devices-inventory-from-cvp.py --help ./create-devices-inventory-from-cvp.py -cvp 192 .168.0.5 -u arista -o inventory cat inventory/all.text Run these commands to get an inventory with the IP address of the devices under the container Spine ./create-devices-inventory-from-cvp.py --help ./create-devices-inventory-from-cvp.py -cvp 192 .168.0.5 -u arista -o inventory -c Spine cat inventory/Spine.text","title":"How to create an inventory from CVP"},{"location":"usage/#how-to-check-devices-state","text":"The python script check-devices.py uses the python functions defined in the package ANTA to test devices: Update the devices inventory with the devices IP address or hostname Update the file tests.yaml to indicate the tests you would like to run. Some tests require an argument. In that case, provide it using the same YAML file Execute the script check-devices.py Check the tests result in the output file vi devices.txt vi tests.yaml ./check-devices.py --help ./check-devices.py -i devices.txt -t tests.yaml -o output.txt -u username cat output.txt","title":"How to check devices state"},{"location":"usage/#how-to-test-devices-reachability","text":"The python script check-devices-reachability.py checks the devices reachability using eAPI: Update the devices inventory with the devices IP address or hostname Run the python script check-devices-reachability.py Check the result in the console vi devices.txt ./check-devices-reachability.py --help ./check-devices-reachability.py -i devices.txt -u username","title":"How to test devices reachability"},{"location":"usage/#how-to-collect-commands-output","text":"The python script collect-eos-commands.py runs show commands on devices and collects the output: Update the devices inventory with the devices IP address or hostname Update the EOS commands list you would like to collect from the devices in text or JSON format Run the python script collect-eos-commands.py The commands output is saved in the output directory vi devices-list.text vi eos-commands.yaml ./collect-eos-commands.py --help ./collect-eos-commands.py -i devices.txt -c eos-commands.yaml -o outdir -u username ls outdir","title":"How to collect commands output"},{"location":"usage/#how-to-collect-the-scheduled-show-tech-support-files","text":"The python script collect-sheduled-show-tech.py collects the scheduled show tech-support files: Update the devices inventory with the devices IP address or hostname Run the python script collect-sheduled-show-tech.py The files are saved in the output directory vi devices-list.text ./collect-sheduled-show-tech.py --help ./collect-sheduled-show-tech.py -i devices.txt -u username -o outdir ls outdir","title":"How to collect the scheduled show tech-support files"},{"location":"usage/#how-to-clear-counters","text":"The python script clear-counters.py clears counters: Update the devices inventory with the devices IP address or hostname Run the python script clear-counters.py vi devices-list.text ./clear-counters.py --help ./clear-counters.py -i devices.txt -u username","title":"How to clear counters"},{"location":"usage/#how-to-clear-the-mac-addresses-which-are-blacklisted-in-evpn","text":"The python script evpn-blacklist-recovery.py clears the MAC addresses which are blacklisted in EVPN: Update the devices inventory with the devices IP address or hostname Run the python script evpn-blacklist-recovery.py vi devices-list.text ./evpn-blacklist-recovery.py --help ./evpn-blacklist-recovery.py -i devices.txt -u username","title":"How to clear the MAC addresses which are blacklisted in EVPN"},{"location":"api/","text":"API Overview \u00b6 Modules \u00b6 decorators : decorators for tests inventory : Inventory Module for ANTA. inventory.exceptions : Manage Exception in Inventory module. inventory.models : Models related to inventory management. loader : Loader that parses a YAML test catalog and imports corresponding Python functions result_manager : Result Manager Module for ANTA. result_manager.models : Models related to anta.result_manager module. tests tests.configuration : Test functions related to the device configuration tests.hardware : Test functions related to the hardware or environement tests.interfaces : Test functions related to the device interfaces tests.mlag : Test functions related to Multi-Chassis LAG tests.multicast : Test functions related to multicast tests.profiles : Test functions related to ASIC profiles tests.routing tests.routing.bgp : BGP test functions tests.routing.generic : Generic routing test functions tests.routing.ospf : OSPF test functions tests.software : Test functions related to the EOS software tests.system : Test functions related to system-level features and protocols tests.vxlan : Test functions related to VXLAN Classes \u00b6 inventory.AntaInventory : Inventory Abstraction for ANTA framework. exceptions.InventoryIncorrectSchema : Error when user data does not follow ANTA schema. exceptions.InventoryRootKeyErrors : Error raised when inventory root key is not found. exceptions.InventoryUnknownFormat : Error when inventory format output is not a supported one. models.AntaInventoryHost : Host definition for user\u2019s inventory. models.AntaInventoryInput : User\u2019s inventory model. models.AntaInventoryNetwork : Network definition for user\u2019s inventory. models.AntaInventoryRange : IP Range definition for user\u2019s inventory. models.InventoryDevice : Inventory model exposed by Inventory class. models.InventoryDevices : Inventory model to list all InventoryDevice entries. result_manager.ResultManager : Helper to manage Test Results and generate reports. models.ListResult : List result for all tests on all devices. models.TestResult : Describe result of a test from a single device. Functions \u00b6 decorators.check_bgp_family_enable : Decorator factory to skip a test if BGP is enabled decorators.skip_on_platforms : Decorator factory to skip a test on a list of platforms loader.parse_catalog : Function to pase the catalog and return a list of tests configuration.verify_running_config_diffs : Verifies there is no difference between the running-config and the startup-config. configuration.verify_zerotouch : Verifies ZeroTouch is disabled. hardware.verify_adverse_drops : Verifies there is no adverse drops on DCS-7280E and DCS-7500E switches. hardware.verify_environment_cooling : Verifies the fans status is OK. hardware.verify_environment_power : Verifies the power supplies status is OK. hardware.verify_system_temperature : Verifies the device temperature is currently OK hardware.verify_transceiver_temperature : Verifies the transceivers temperature is currently OK hardware.verify_transceivers_manufacturers : Verifies the device is only using transceivers from supported manufacturers. interfaces.verify_illegal_lacp : Verifies there is no illegal LACP packets received. interfaces.verify_interface_discards : Verifies interfaces packet discard counters are equal to zero. interfaces.verify_interface_errdisabled : Verifies there is no interface in error disable state. interfaces.verify_interface_errors : Verifies interfaces error counters are equal to zero. interfaces.verify_interface_utilization : Verifies interfaces utilization is below 75%. interfaces.verify_interfaces_status : Verifies the number of Ethernet interfaces up/up on the device is higher or equal than a value. interfaces.verify_loopback_count : Verifies the number of loopback interfaces on the device is the one we expect. interfaces.verify_portchannels : Verifies there is no inactive port in port channels. interfaces.verify_spanning_tree_blocked_ports : Verifies there is no spanning-tree blocked ports. interfaces.verify_storm_control_drops : Verifies the device did not drop packets due its to storm-control configuration. interfaces.verify_svi : Verifies there is no interface vlan down. mlag.verify_mlag_config_sanity : Verifies there is no MLAG config-sanity inconsistencies. mlag.verify_mlag_interfaces : Verifies there is no inactive or active-partial MLAG interfaces. mlag.verify_mlag_status : Verifies the MLAG status: multicast.verify_igmp_snooping_global : Verifies the IGMP snooping global configuration. multicast.verify_igmp_snooping_vlans : Verifies the IGMP snooping configuration for some VLANs. profiles.verify_tcam_profile : Verifies the configured TCAM profile is the expected one. profiles.verify_unified_forwarding_table_mode : Verifies the device is using the expected Unified Forwarding Table mode. bgp.verify_bgp_evpn_count : Verifies all EVPN BGP sessions are established (default VRF) bgp.verify_bgp_evpn_state : Verifies all EVPN BGP sessions are established (default VRF). bgp.verify_bgp_ipv4_unicast_count : Verifies all IPv4 unicast BGP sessions are established bgp.verify_bgp_ipv4_unicast_state : Verifies all IPv4 unicast BGP sessions are established (for all VRF) bgp.verify_bgp_ipv6_unicast_state : Verifies all IPv6 unicast BGP sessions are established (for all VRF) bgp.verify_bgp_rtc_count : Verifies all RTC BGP sessions are established (default VRF) bgp.verify_bgp_rtc_state : Verifies all RTC BGP sessions are established (default VRF). generic.verify_bfd : Verifies there is no BFD peer in down state (all VRF, IPv4 neighbors). generic.verify_routing_protocol_model : Verifies the configured routing protocol model is the one we expect. generic.verify_routing_table_size : Verifies the size of the IP routing table (default VRF). ospf.verify_ospf_count : Verifies the number of OSPF neighbors in FULL state is the one we expect. ospf.verify_ospf_state : Verifies all OSPF neighbors are in FULL state. software.verify_eos_extensions : Verifies all EOS extensions installed on the device are enabled for boot persistence. software.verify_eos_version : Verifies the device is running one of the allowed EOS version. software.verify_field_notice_44_resolution : Verifies the device is using an Aboot version that fix the bug discussed software.verify_terminattr_version : Verifies the device is running one of the allowed TerminAttr version. system.verify_agent_logs : Verifies there is no agent crash reported on the device. system.verify_coredump : Verifies there is no core file. system.verify_cpu_utilization : Verifies the CPU utilization is less than 75%. system.verify_filesystem_utilization : Verifies each partition on the disk is used less than 75%. system.verify_memory_utilization : Verifies the memory utilization is less than 75%. system.verify_ntp : Verifies NTP is synchronised. system.verify_reload_cause : Verifies the last reload of the device was requested by a user. system.verify_syslog : Verifies the device had no syslog message with a severity of warning (or a more severe message) system.verify_uptime : Verifies the device uptime is higher than a value. vxlan.verify_vxlan : Verifies the interface vxlan 1 status is up/up. vxlan.verify_vxlan_config_sanity : Verifies there is no VXLAN config-sanity warnings. This file was automatically generated via lazydocs .","title":"Index"},{"location":"api/#api-overview","text":"","title":"API Overview"},{"location":"api/#modules","text":"decorators : decorators for tests inventory : Inventory Module for ANTA. inventory.exceptions : Manage Exception in Inventory module. inventory.models : Models related to inventory management. loader : Loader that parses a YAML test catalog and imports corresponding Python functions result_manager : Result Manager Module for ANTA. result_manager.models : Models related to anta.result_manager module. tests tests.configuration : Test functions related to the device configuration tests.hardware : Test functions related to the hardware or environement tests.interfaces : Test functions related to the device interfaces tests.mlag : Test functions related to Multi-Chassis LAG tests.multicast : Test functions related to multicast tests.profiles : Test functions related to ASIC profiles tests.routing tests.routing.bgp : BGP test functions tests.routing.generic : Generic routing test functions tests.routing.ospf : OSPF test functions tests.software : Test functions related to the EOS software tests.system : Test functions related to system-level features and protocols tests.vxlan : Test functions related to VXLAN","title":"Modules"},{"location":"api/#classes","text":"inventory.AntaInventory : Inventory Abstraction for ANTA framework. exceptions.InventoryIncorrectSchema : Error when user data does not follow ANTA schema. exceptions.InventoryRootKeyErrors : Error raised when inventory root key is not found. exceptions.InventoryUnknownFormat : Error when inventory format output is not a supported one. models.AntaInventoryHost : Host definition for user\u2019s inventory. models.AntaInventoryInput : User\u2019s inventory model. models.AntaInventoryNetwork : Network definition for user\u2019s inventory. models.AntaInventoryRange : IP Range definition for user\u2019s inventory. models.InventoryDevice : Inventory model exposed by Inventory class. models.InventoryDevices : Inventory model to list all InventoryDevice entries. result_manager.ResultManager : Helper to manage Test Results and generate reports. models.ListResult : List result for all tests on all devices. models.TestResult : Describe result of a test from a single device.","title":"Classes"},{"location":"api/#functions","text":"decorators.check_bgp_family_enable : Decorator factory to skip a test if BGP is enabled decorators.skip_on_platforms : Decorator factory to skip a test on a list of platforms loader.parse_catalog : Function to pase the catalog and return a list of tests configuration.verify_running_config_diffs : Verifies there is no difference between the running-config and the startup-config. configuration.verify_zerotouch : Verifies ZeroTouch is disabled. hardware.verify_adverse_drops : Verifies there is no adverse drops on DCS-7280E and DCS-7500E switches. hardware.verify_environment_cooling : Verifies the fans status is OK. hardware.verify_environment_power : Verifies the power supplies status is OK. hardware.verify_system_temperature : Verifies the device temperature is currently OK hardware.verify_transceiver_temperature : Verifies the transceivers temperature is currently OK hardware.verify_transceivers_manufacturers : Verifies the device is only using transceivers from supported manufacturers. interfaces.verify_illegal_lacp : Verifies there is no illegal LACP packets received. interfaces.verify_interface_discards : Verifies interfaces packet discard counters are equal to zero. interfaces.verify_interface_errdisabled : Verifies there is no interface in error disable state. interfaces.verify_interface_errors : Verifies interfaces error counters are equal to zero. interfaces.verify_interface_utilization : Verifies interfaces utilization is below 75%. interfaces.verify_interfaces_status : Verifies the number of Ethernet interfaces up/up on the device is higher or equal than a value. interfaces.verify_loopback_count : Verifies the number of loopback interfaces on the device is the one we expect. interfaces.verify_portchannels : Verifies there is no inactive port in port channels. interfaces.verify_spanning_tree_blocked_ports : Verifies there is no spanning-tree blocked ports. interfaces.verify_storm_control_drops : Verifies the device did not drop packets due its to storm-control configuration. interfaces.verify_svi : Verifies there is no interface vlan down. mlag.verify_mlag_config_sanity : Verifies there is no MLAG config-sanity inconsistencies. mlag.verify_mlag_interfaces : Verifies there is no inactive or active-partial MLAG interfaces. mlag.verify_mlag_status : Verifies the MLAG status: multicast.verify_igmp_snooping_global : Verifies the IGMP snooping global configuration. multicast.verify_igmp_snooping_vlans : Verifies the IGMP snooping configuration for some VLANs. profiles.verify_tcam_profile : Verifies the configured TCAM profile is the expected one. profiles.verify_unified_forwarding_table_mode : Verifies the device is using the expected Unified Forwarding Table mode. bgp.verify_bgp_evpn_count : Verifies all EVPN BGP sessions are established (default VRF) bgp.verify_bgp_evpn_state : Verifies all EVPN BGP sessions are established (default VRF). bgp.verify_bgp_ipv4_unicast_count : Verifies all IPv4 unicast BGP sessions are established bgp.verify_bgp_ipv4_unicast_state : Verifies all IPv4 unicast BGP sessions are established (for all VRF) bgp.verify_bgp_ipv6_unicast_state : Verifies all IPv6 unicast BGP sessions are established (for all VRF) bgp.verify_bgp_rtc_count : Verifies all RTC BGP sessions are established (default VRF) bgp.verify_bgp_rtc_state : Verifies all RTC BGP sessions are established (default VRF). generic.verify_bfd : Verifies there is no BFD peer in down state (all VRF, IPv4 neighbors). generic.verify_routing_protocol_model : Verifies the configured routing protocol model is the one we expect. generic.verify_routing_table_size : Verifies the size of the IP routing table (default VRF). ospf.verify_ospf_count : Verifies the number of OSPF neighbors in FULL state is the one we expect. ospf.verify_ospf_state : Verifies all OSPF neighbors are in FULL state. software.verify_eos_extensions : Verifies all EOS extensions installed on the device are enabled for boot persistence. software.verify_eos_version : Verifies the device is running one of the allowed EOS version. software.verify_field_notice_44_resolution : Verifies the device is using an Aboot version that fix the bug discussed software.verify_terminattr_version : Verifies the device is running one of the allowed TerminAttr version. system.verify_agent_logs : Verifies there is no agent crash reported on the device. system.verify_coredump : Verifies there is no core file. system.verify_cpu_utilization : Verifies the CPU utilization is less than 75%. system.verify_filesystem_utilization : Verifies each partition on the disk is used less than 75%. system.verify_memory_utilization : Verifies the memory utilization is less than 75%. system.verify_ntp : Verifies NTP is synchronised. system.verify_reload_cause : Verifies the last reload of the device was requested by a user. system.verify_syslog : Verifies the device had no syslog message with a severity of warning (or a more severe message) system.verify_uptime : Verifies the device uptime is higher than a value. vxlan.verify_vxlan : Verifies the interface vxlan 1 status is up/up. vxlan.verify_vxlan_config_sanity : Verifies there is no VXLAN config-sanity warnings. This file was automatically generated via lazydocs .","title":"Functions"},{"location":"api/decorators/","text":"module decorators \u00b6 decorators for tests function skip_on_platforms \u00b6 skip_on_platforms ( platforms : List [ str ] ) \u2192 Callable [ ... , Callable [ ... , anta . result_manager . models . TestResult ]] Decorator factory to skip a test on a list of platforms Args: * platforms (List[str]): the list of platforms on which the decorated test should be skipped. function check_bgp_family_enable \u00b6 check_bgp_family_enable ( family : str ) \u2192 Callable [ ... , Callable [ ... , anta . result_manager . models . TestResult ]] Decorator factory to skip a test if BGP is enabled Args: * family (str): BGP family to check. Can be ipv4 / ipv6 / evpn / rtc This file was automatically generated via lazydocs .","title":"Decorators"},{"location":"api/decorators/#module-decorators","text":"decorators for tests","title":"module decorators"},{"location":"api/decorators/#function-skip_on_platforms","text":"skip_on_platforms ( platforms : List [ str ] ) \u2192 Callable [ ... , Callable [ ... , anta . result_manager . models . TestResult ]] Decorator factory to skip a test on a list of platforms Args: * platforms (List[str]): the list of platforms on which the decorated test should be skipped.","title":"function skip_on_platforms"},{"location":"api/decorators/#function-check_bgp_family_enable","text":"check_bgp_family_enable ( family : str ) \u2192 Callable [ ... , Callable [ ... , anta . result_manager . models . TestResult ]] Decorator factory to skip a test if BGP is enabled Args: * family (str): BGP family to check. Can be ipv4 / ipv6 / evpn / rtc This file was automatically generated via lazydocs .","title":"function check_bgp_family_enable"},{"location":"api/inventory.exceptions/","text":"module inventory.exceptions \u00b6 Manage Exception in Inventory module. class InventoryRootKeyErrors \u00b6 Error raised when inventory root key is not found. class InventoryIncorrectSchema \u00b6 Error when user data does not follow ANTA schema. class InventoryUnknownFormat \u00b6 Error when inventory format output is not a supported one. This file was automatically generated via lazydocs .","title":"Inventory.exceptions"},{"location":"api/inventory.exceptions/#module-inventoryexceptions","text":"Manage Exception in Inventory module.","title":"module inventory.exceptions"},{"location":"api/inventory.exceptions/#class-inventoryrootkeyerrors","text":"Error raised when inventory root key is not found.","title":"class InventoryRootKeyErrors"},{"location":"api/inventory.exceptions/#class-inventoryincorrectschema","text":"Error when user data does not follow ANTA schema.","title":"class InventoryIncorrectSchema"},{"location":"api/inventory.exceptions/#class-inventoryunknownformat","text":"Error when inventory format output is not a supported one. This file was automatically generated via lazydocs .","title":"class InventoryUnknownFormat"},{"location":"api/inventory/","text":"module inventory \u00b6 Inventory Module for ANTA. Global Variables \u00b6 exceptions : # coding: utf-8 -*- models : # - - coding: utf-8 - - class AntaInventory \u00b6 Inventory Abstraction for ANTA framework. Attributes: timeout (float): Connection to device timeout. INVENTORY_ROOT_KEY (str, Optional): head of the YAML inventory. Default is anta_inventory EAPI_SESSION_TPL (str, Optional): Template for eAPI URL builder INVENTORY_OUTPUT_FORMAT (List[str],Optional): List of supported output format. Default [\u2018native\u2019, \u2018json\u2019] HW_MODEL_KEY (str,Optional): Name of the key in Arista eAPI JSON provided by device. Examples: Inventory file input print(inventory.yml) anta_inventory: hosts: - hosts: 1.1.1.1 - host: 2.2.2.2 networks: - network: 10.0.0.0/8 - network: 192.168.0.0/16 ranges: - start: 10.0.0.1 end: 10.0.0.11 Inventory result: test = AntaInventory( \u2026 inventory_file=\u2019examples/inventory.yml\u2019, \u2026 username=\u2019ansible\u2019, \u2026 password=\u2019ansible\u2019, \u2026 auto_connect=True) test.get_inventory() [ \u201cInventoryDevice(host=IPv4Address(\u2018192.168.0.17\u2019)\u201d, \u201cusername=\u2019ansible\u2019\u201c, \u201cpassword=\u2019ansible\u2019\u201c, \u201csession= \u201c, \u201curl=\u2019 https://ansible:ansible@192.168.0.17/command-api \u2019\u201c, \u201cestablished=True\u201d, \u201cis_online=True\u201d, \u201chw_model=cEOS-LAB\u201d, \u2026 \u201cInventoryDevice(host=IPv4Address(\u2018192.168.0.2\u2019)\u201d, \u201cusername=\u2019ansible\u2019\u201c, \u201cpassword=\u2019ansible\u2019\u201c, \u201csession=None\u201d, \u201curl=\u2019 https://ansible:ansible@192.168.0.2/command-api \u2019\u201c, \u201cestablished=False\u201d \u201cis_online=False\u201d, \u201chw_model=unset\u201d, ] Raises: InventoryRootKeyErrors : Root key of inventory is missing. InventoryIncorrectSchema : Inventory file is not following AntaInventory Schema. InventoryUnknownFormat : Output format is not supported. method AntaInventory.__init__ \u00b6 __init__ ( inventory_file : str , username : str , password : str , enable_password : str = None , auto_connect : bool = True , timeout : float = 5 ) \u2192 None Class constructor. Args: inventory_file (str): Path to inventory YAML file where user has described his inputs username (str): Username to use to connect to devices password (str): Password to use to connect to devices auto_connect (bool, optional): Automatically build eAPI context for every devices. Defaults to True. timeout (float, optional): Timeout in second to wait before marking device down. Defaults to 5sec. method AntaInventory.connect_inventory \u00b6 connect_inventory () \u2192 None connect_inventory Helper to prepare inventory with network data. method AntaInventory.create_all_sessions \u00b6 create_all_sessions ( refresh_online_first : bool = False ) \u2192 None Helper to build RPC sessions to all devices. Args: refresh_online_first (bool): Run a refresh of is_online flag for all devices. method AntaInventory.create_device_session \u00b6 create_device_session ( host_ip : str ) \u2192 bool Get session of a device. If device has already a session, function only returns active session, if not, try to build a new session Args: host_ip (str): IP address of the device Returns: bool : True if update succeed, False if not method AntaInventory.get_device \u00b6 get_device ( host_ip : str ) \u2192 Optional [ inventory . models . InventoryDevice ] Get device information from a given IP. Args: host_ip (str): IP address of the device Returns: InventoryDevice : Device information method AntaInventory.get_device_session \u00b6 get_device_session ( host_ip : str ) \u2192 ServerProxy Expose RPC session of a given host from our inventory. Provide RPC session if the session exists, if not, it returns None Args: host_ip (str): IP address of the host to match Returns: jsonrpclib.Server : Instance to the device. None if session does not exist method AntaInventory.get_inventory \u00b6 get_inventory ( format_out : str = 'native' , established_only : bool = True ) \u2192 Union [ List [ inventory . models . InventoryDevice ], str , inventory . models . InventoryDevices ] get_inventory Expose device inventory. Provides inventory has a list of InventoryDevice objects. If requried, it can be exposed in JSON format. Also, by default expose only active devices. Args: format (str, optional): Format output, can be native, list or JSON. Defaults to \u2018native\u2019. established_only (bool, optional): Allow to expose also unreachable devices. Defaults to True. Returns: InventoryDevices : List of InventoryDevice method AntaInventory.refresh_device_facts \u00b6 refresh_device_facts () \u2192 None refresh_online_flag_inventory Update is_online flag for all devices. Execute in parallel a call to _refresh_online_flag_device to test device connectivity. method AntaInventory.set_credentials \u00b6 set_credentials ( username : str = None , password : str = None , enable_password : str = None ) \u2192 None Set the credentials for the Inventory This file was automatically generated via lazydocs .","title":"Inventory module"},{"location":"api/inventory/#module-inventory","text":"Inventory Module for ANTA.","title":"module inventory"},{"location":"api/inventory/#global-variables","text":"exceptions : # coding: utf-8 -*- models : # - - coding: utf-8 - -","title":"Global Variables"},{"location":"api/inventory/#class-antainventory","text":"Inventory Abstraction for ANTA framework. Attributes: timeout (float): Connection to device timeout. INVENTORY_ROOT_KEY (str, Optional): head of the YAML inventory. Default is anta_inventory EAPI_SESSION_TPL (str, Optional): Template for eAPI URL builder INVENTORY_OUTPUT_FORMAT (List[str],Optional): List of supported output format. Default [\u2018native\u2019, \u2018json\u2019] HW_MODEL_KEY (str,Optional): Name of the key in Arista eAPI JSON provided by device. Examples: Inventory file input print(inventory.yml) anta_inventory: hosts: - hosts: 1.1.1.1 - host: 2.2.2.2 networks: - network: 10.0.0.0/8 - network: 192.168.0.0/16 ranges: - start: 10.0.0.1 end: 10.0.0.11 Inventory result: test = AntaInventory( \u2026 inventory_file=\u2019examples/inventory.yml\u2019, \u2026 username=\u2019ansible\u2019, \u2026 password=\u2019ansible\u2019, \u2026 auto_connect=True) test.get_inventory() [ \u201cInventoryDevice(host=IPv4Address(\u2018192.168.0.17\u2019)\u201d, \u201cusername=\u2019ansible\u2019\u201c, \u201cpassword=\u2019ansible\u2019\u201c, \u201csession= \u201c, \u201curl=\u2019 https://ansible:ansible@192.168.0.17/command-api \u2019\u201c, \u201cestablished=True\u201d, \u201cis_online=True\u201d, \u201chw_model=cEOS-LAB\u201d, \u2026 \u201cInventoryDevice(host=IPv4Address(\u2018192.168.0.2\u2019)\u201d, \u201cusername=\u2019ansible\u2019\u201c, \u201cpassword=\u2019ansible\u2019\u201c, \u201csession=None\u201d, \u201curl=\u2019 https://ansible:ansible@192.168.0.2/command-api \u2019\u201c, \u201cestablished=False\u201d \u201cis_online=False\u201d, \u201chw_model=unset\u201d, ] Raises: InventoryRootKeyErrors : Root key of inventory is missing. InventoryIncorrectSchema : Inventory file is not following AntaInventory Schema. InventoryUnknownFormat : Output format is not supported.","title":"class AntaInventory"},{"location":"api/inventory/#method-antainventory__init__","text":"__init__ ( inventory_file : str , username : str , password : str , enable_password : str = None , auto_connect : bool = True , timeout : float = 5 ) \u2192 None Class constructor. Args: inventory_file (str): Path to inventory YAML file where user has described his inputs username (str): Username to use to connect to devices password (str): Password to use to connect to devices auto_connect (bool, optional): Automatically build eAPI context for every devices. Defaults to True. timeout (float, optional): Timeout in second to wait before marking device down. Defaults to 5sec.","title":"method AntaInventory.__init__"},{"location":"api/inventory/#method-antainventoryconnect_inventory","text":"connect_inventory () \u2192 None connect_inventory Helper to prepare inventory with network data.","title":"method AntaInventory.connect_inventory"},{"location":"api/inventory/#method-antainventorycreate_all_sessions","text":"create_all_sessions ( refresh_online_first : bool = False ) \u2192 None Helper to build RPC sessions to all devices. Args: refresh_online_first (bool): Run a refresh of is_online flag for all devices.","title":"method AntaInventory.create_all_sessions"},{"location":"api/inventory/#method-antainventorycreate_device_session","text":"create_device_session ( host_ip : str ) \u2192 bool Get session of a device. If device has already a session, function only returns active session, if not, try to build a new session Args: host_ip (str): IP address of the device Returns: bool : True if update succeed, False if not","title":"method AntaInventory.create_device_session"},{"location":"api/inventory/#method-antainventoryget_device","text":"get_device ( host_ip : str ) \u2192 Optional [ inventory . models . InventoryDevice ] Get device information from a given IP. Args: host_ip (str): IP address of the device Returns: InventoryDevice : Device information","title":"method AntaInventory.get_device"},{"location":"api/inventory/#method-antainventoryget_device_session","text":"get_device_session ( host_ip : str ) \u2192 ServerProxy Expose RPC session of a given host from our inventory. Provide RPC session if the session exists, if not, it returns None Args: host_ip (str): IP address of the host to match Returns: jsonrpclib.Server : Instance to the device. None if session does not exist","title":"method AntaInventory.get_device_session"},{"location":"api/inventory/#method-antainventoryget_inventory","text":"get_inventory ( format_out : str = 'native' , established_only : bool = True ) \u2192 Union [ List [ inventory . models . InventoryDevice ], str , inventory . models . InventoryDevices ] get_inventory Expose device inventory. Provides inventory has a list of InventoryDevice objects. If requried, it can be exposed in JSON format. Also, by default expose only active devices. Args: format (str, optional): Format output, can be native, list or JSON. Defaults to \u2018native\u2019. established_only (bool, optional): Allow to expose also unreachable devices. Defaults to True. Returns: InventoryDevices : List of InventoryDevice","title":"method AntaInventory.get_inventory"},{"location":"api/inventory/#method-antainventoryrefresh_device_facts","text":"refresh_device_facts () \u2192 None refresh_online_flag_inventory Update is_online flag for all devices. Execute in parallel a call to _refresh_online_flag_device to test device connectivity.","title":"method AntaInventory.refresh_device_facts"},{"location":"api/inventory/#method-antainventoryset_credentials","text":"set_credentials ( username : str = None , password : str = None , enable_password : str = None ) \u2192 None Set the credentials for the Inventory This file was automatically generated via lazydocs .","title":"method AntaInventory.set_credentials"},{"location":"api/inventory.models/","text":"module inventory.models \u00b6 Models related to inventory management. class AntaInventoryHost \u00b6 Host definition for user\u2019s inventory. Attributes: host (IPvAnyAddress): IPv4 or IPv6 address of the device class AntaInventoryNetwork \u00b6 Network definition for user\u2019s inventory. Attributes: network (IPvAnyNetwork): Subnet to use for testing. class AntaInventoryRange \u00b6 IP Range definition for user\u2019s inventory. Attributes: start (IPvAnyAddress): IPv4 or IPv6 address for the begining of the range. stop (IPvAnyAddress): IPv4 or IPv6 address for the end of the range. class AntaInventoryInput \u00b6 User\u2019s inventory model. Attributes: netwrks (List[AntaInventoryNetwork],Optional): List of AntaInventoryNetwork objects for networks. hosts (List[AntaInventoryHost],Optional): List of AntaInventoryHost objects for hosts. range (List[AntaInventoryRange],Optional): List of AntaInventoryRange objects for ranges. class InventoryDevice \u00b6 Inventory model exposed by Inventory class. Attributes: host (IPvAnyAddress): IPv4 or IPv6 address of the device. username (str): Username to use for connection. password (password): Password to use for connection. enable_password (Optional[str]): enable_password to use on the device, required for some tests session (Any): JSONRPC session. established (bool): Flag to mark if connection is established (True) or not (False). Default: False. is_online (bool): Flag to mark if host is alive (True) or not (False). Default: False. hw_model (str): HW name gathered during device discovery. url (str): eAPI URL to use to build session. method InventoryDevice.assert_enable_password_is_not_none \u00b6 assert_enable_password_is_not_none ( test_name : Optional [ str ] = None ) \u2192 None raise ValueError is enable_password is None class InventoryDevices \u00b6 Inventory model to list all InventoryDevice entries. Attributes: __root__ (List[InventoryDevice]): A list of InventoryDevice objects. method InventoryDevices.append \u00b6 append ( value : inventory . models . InventoryDevice ) \u2192 None Add support for append method. This file was automatically generated via lazydocs .","title":"Generated Inventory data model"},{"location":"api/inventory.models/#module-inventorymodels","text":"Models related to inventory management.","title":"module inventory.models"},{"location":"api/inventory.models/#class-antainventoryhost","text":"Host definition for user\u2019s inventory. Attributes: host (IPvAnyAddress): IPv4 or IPv6 address of the device","title":"class AntaInventoryHost"},{"location":"api/inventory.models/#class-antainventorynetwork","text":"Network definition for user\u2019s inventory. Attributes: network (IPvAnyNetwork): Subnet to use for testing.","title":"class AntaInventoryNetwork"},{"location":"api/inventory.models/#class-antainventoryrange","text":"IP Range definition for user\u2019s inventory. Attributes: start (IPvAnyAddress): IPv4 or IPv6 address for the begining of the range. stop (IPvAnyAddress): IPv4 or IPv6 address for the end of the range.","title":"class AntaInventoryRange"},{"location":"api/inventory.models/#class-antainventoryinput","text":"User\u2019s inventory model. Attributes: netwrks (List[AntaInventoryNetwork],Optional): List of AntaInventoryNetwork objects for networks. hosts (List[AntaInventoryHost],Optional): List of AntaInventoryHost objects for hosts. range (List[AntaInventoryRange],Optional): List of AntaInventoryRange objects for ranges.","title":"class AntaInventoryInput"},{"location":"api/inventory.models/#class-inventorydevice","text":"Inventory model exposed by Inventory class. Attributes: host (IPvAnyAddress): IPv4 or IPv6 address of the device. username (str): Username to use for connection. password (password): Password to use for connection. enable_password (Optional[str]): enable_password to use on the device, required for some tests session (Any): JSONRPC session. established (bool): Flag to mark if connection is established (True) or not (False). Default: False. is_online (bool): Flag to mark if host is alive (True) or not (False). Default: False. hw_model (str): HW name gathered during device discovery. url (str): eAPI URL to use to build session.","title":"class InventoryDevice"},{"location":"api/inventory.models/#method-inventorydeviceassert_enable_password_is_not_none","text":"assert_enable_password_is_not_none ( test_name : Optional [ str ] = None ) \u2192 None raise ValueError is enable_password is None","title":"method InventoryDevice.assert_enable_password_is_not_none"},{"location":"api/inventory.models/#class-inventorydevices","text":"Inventory model to list all InventoryDevice entries. Attributes: __root__ (List[InventoryDevice]): A list of InventoryDevice objects.","title":"class InventoryDevices"},{"location":"api/inventory.models/#method-inventorydevicesappend","text":"append ( value : inventory . models . InventoryDevice ) \u2192 None Add support for append method. This file was automatically generated via lazydocs .","title":"method InventoryDevices.append"},{"location":"api/loader/","text":"module loader \u00b6 Loader that parses a YAML test catalog and imports corresponding Python functions function parse_catalog \u00b6 parse_catalog ( test_catalog : Dict [ Any , Any ], package : str = 'anta.tests' ) \u2192 List [ Tuple [ Callable [ ... , anta . result_manager . models . TestResult ], Dict [ Any , Any ]]] Function to pase the catalog and return a list of tests This file was automatically generated via lazydocs .","title":"Loader"},{"location":"api/loader/#module-loader","text":"Loader that parses a YAML test catalog and imports corresponding Python functions","title":"module loader"},{"location":"api/loader/#function-parse_catalog","text":"parse_catalog ( test_catalog : Dict [ Any , Any ], package : str = 'anta.tests' ) \u2192 List [ Tuple [ Callable [ ... , anta . result_manager . models . TestResult ], Dict [ Any , Any ]]] Function to pase the catalog and return a list of tests This file was automatically generated via lazydocs .","title":"function parse_catalog"},{"location":"api/result_manager/","text":"module result_manager \u00b6 Result Manager Module for ANTA. class ResultManager \u00b6 Helper to manage Test Results and generate reports. Examples: Create Inventory: inventory_anta = AntaInventory( inventory_file=\u2019examples/inventory.yml\u2019, username=\u2019ansible\u2019, password=\u2019ansible\u2019, timeout=0.5, auto_connect=True ) Create Result Manager: manager = ResultManager() Run tests for all connected devices: for device in inventory_anta.get_inventory(): manager.add_test_result( verify_eos_version( device=device, versions=[\u20184.28.0F\u2019] ) ) manager.add_test_result( verify_uptime( device=device, minimum=1 ) ) Print result in native format: manager.get_results() [ TestResult( host=IPv4Address(\u2018192.168.0.10\u2019), test=\u2019verify_eos_version\u2019, result=\u2019failure\u2019, message=\u201ddevice is running version 4.27.3F-26379303.4273F (engineering build) and test expect [\u20184.28.0F\u2019]\u201d ), TestResult( host=IPv4Address(\u2018192.168.0.10\u2019), test=\u2019verify_eos_version\u2019, result=\u2019success\u2019, message=None ), ] method ResultManager.__init__ \u00b6 __init__ () \u2192 None Class constructor. method ResultManager.add_test_result \u00b6 add_test_result ( entry : anta . result_manager . models . TestResult ) \u2192 None Add a result to the list Args: entry (TestResult): TestResult data to add to the report method ResultManager.get_hosts \u00b6 get_hosts () \u2192 List [ str ] Get list of IP addresses in current manager. Returns: List[str] : List of IP addresses. method ResultManager.get_result_by_host \u00b6 get_result_by_host ( host_ip : str , output_format : str = 'native' ) \u2192 Any Get list of test result for a given host. Args: host_ip (str): IP Address of the host to use to filter results. output_format (str, optional): format selector. Can be either native/list. Defaults to \u2018native\u2019. Returns: Any : List of results related to the host. method ResultManager.get_result_by_test \u00b6 get_result_by_test ( test_name : str , output_format : str = 'native' ) \u2192 Any Get list of test result for a given test. Args: test_name (str): Test name to use to filter results output_format (str, optional): format selector. Can be either native/list. Defaults to \u2018native\u2019. Returns: list[TestResult] : List of results related to the test. method ResultManager.get_results \u00b6 get_results ( output_format : str = 'native' ) \u2192 Any Expose list of all test results in different format Support multiple format: - native: ListResults format - list: a list of TestResult - json: a native JSON format Args: output_format (str, optional): format selector. Can be either native/list/json. Defaults to \u2018native\u2019. Returns: any : List of results. method ResultManager.get_testcases \u00b6 get_testcases () \u2192 List [ str ] Get list of name of all test cases in current manager. Returns: List[str] : List of names for all tests. This file was automatically generated via lazydocs .","title":"Result Manager module"},{"location":"api/result_manager/#module-result_manager","text":"Result Manager Module for ANTA.","title":"module result_manager"},{"location":"api/result_manager/#class-resultmanager","text":"Helper to manage Test Results and generate reports. Examples: Create Inventory: inventory_anta = AntaInventory( inventory_file=\u2019examples/inventory.yml\u2019, username=\u2019ansible\u2019, password=\u2019ansible\u2019, timeout=0.5, auto_connect=True ) Create Result Manager: manager = ResultManager() Run tests for all connected devices: for device in inventory_anta.get_inventory(): manager.add_test_result( verify_eos_version( device=device, versions=[\u20184.28.0F\u2019] ) ) manager.add_test_result( verify_uptime( device=device, minimum=1 ) ) Print result in native format: manager.get_results() [ TestResult( host=IPv4Address(\u2018192.168.0.10\u2019), test=\u2019verify_eos_version\u2019, result=\u2019failure\u2019, message=\u201ddevice is running version 4.27.3F-26379303.4273F (engineering build) and test expect [\u20184.28.0F\u2019]\u201d ), TestResult( host=IPv4Address(\u2018192.168.0.10\u2019), test=\u2019verify_eos_version\u2019, result=\u2019success\u2019, message=None ), ]","title":"class ResultManager"},{"location":"api/result_manager/#method-resultmanager__init__","text":"__init__ () \u2192 None Class constructor.","title":"method ResultManager.__init__"},{"location":"api/result_manager/#method-resultmanageradd_test_result","text":"add_test_result ( entry : anta . result_manager . models . TestResult ) \u2192 None Add a result to the list Args: entry (TestResult): TestResult data to add to the report","title":"method ResultManager.add_test_result"},{"location":"api/result_manager/#method-resultmanagerget_hosts","text":"get_hosts () \u2192 List [ str ] Get list of IP addresses in current manager. Returns: List[str] : List of IP addresses.","title":"method ResultManager.get_hosts"},{"location":"api/result_manager/#method-resultmanagerget_result_by_host","text":"get_result_by_host ( host_ip : str , output_format : str = 'native' ) \u2192 Any Get list of test result for a given host. Args: host_ip (str): IP Address of the host to use to filter results. output_format (str, optional): format selector. Can be either native/list. Defaults to \u2018native\u2019. Returns: Any : List of results related to the host.","title":"method ResultManager.get_result_by_host"},{"location":"api/result_manager/#method-resultmanagerget_result_by_test","text":"get_result_by_test ( test_name : str , output_format : str = 'native' ) \u2192 Any Get list of test result for a given test. Args: test_name (str): Test name to use to filter results output_format (str, optional): format selector. Can be either native/list. Defaults to \u2018native\u2019. Returns: list[TestResult] : List of results related to the test.","title":"method ResultManager.get_result_by_test"},{"location":"api/result_manager/#method-resultmanagerget_results","text":"get_results ( output_format : str = 'native' ) \u2192 Any Expose list of all test results in different format Support multiple format: - native: ListResults format - list: a list of TestResult - json: a native JSON format Args: output_format (str, optional): format selector. Can be either native/list/json. Defaults to \u2018native\u2019. Returns: any : List of results.","title":"method ResultManager.get_results"},{"location":"api/result_manager/#method-resultmanagerget_testcases","text":"get_testcases () \u2192 List [ str ] Get list of name of all test cases in current manager. Returns: List[str] : List of names for all tests. This file was automatically generated via lazydocs .","title":"method ResultManager.get_testcases"},{"location":"api/result_manager.models/","text":"module result_manager.models \u00b6 Models related to anta.result_manager module. Global Variables \u00b6 RESULT_OPTIONS class TestResult \u00b6 Describe result of a test from a single device. Attributes: host (IPvAnyAddress): IPv4 or IPv6 address of the device where the test has run. test (str): Test name runs on the device. results (str): Result of the test. Can be one of unset / failure / success. message (str, optional): Message to report after the test. method TestResult.is_error \u00b6 is_error ( message : str = '' ) \u2192 bool Helper to set status to error Args: message (str): Optional message related to the test Returns: bool : Always true method TestResult.is_failure \u00b6 is_failure ( message : str = '' ) \u2192 bool Helper to set status to failure Args: message (str): Optional message related to the test Returns: bool : Always true method TestResult.is_skipped \u00b6 is_skipped ( message : str = '' ) \u2192 bool Helper to set status to skipped Args: message (str): Optional message related to the test Returns: bool : Always true method TestResult.is_success \u00b6 is_success ( message : str = '' ) \u2192 bool Helper to set status to success Args: message (str): Optional message related to the test Returns: bool : Always true classmethod TestResult.name_must_be_in \u00b6 name_must_be_in ( v : str ) \u2192 str Status validator Validate status is a supported one Args: v (str): User defined status Raises: ValueError : If status is unsupported Returns: str : status value class ListResult \u00b6 List result for all tests on all devices. Attributes: __root__ (List[TestResult]): A list of TestResult objects. method ListResult.append \u00b6 append ( value : result_manager . models . TestResult ) \u2192 None Add support for append method. This file was automatically generated via lazydocs .","title":"Result Manager models"},{"location":"api/result_manager.models/#module-result_managermodels","text":"Models related to anta.result_manager module.","title":"module result_manager.models"},{"location":"api/result_manager.models/#global-variables","text":"RESULT_OPTIONS","title":"Global Variables"},{"location":"api/result_manager.models/#class-testresult","text":"Describe result of a test from a single device. Attributes: host (IPvAnyAddress): IPv4 or IPv6 address of the device where the test has run. test (str): Test name runs on the device. results (str): Result of the test. Can be one of unset / failure / success. message (str, optional): Message to report after the test.","title":"class TestResult"},{"location":"api/result_manager.models/#method-testresultis_error","text":"is_error ( message : str = '' ) \u2192 bool Helper to set status to error Args: message (str): Optional message related to the test Returns: bool : Always true","title":"method TestResult.is_error"},{"location":"api/result_manager.models/#method-testresultis_failure","text":"is_failure ( message : str = '' ) \u2192 bool Helper to set status to failure Args: message (str): Optional message related to the test Returns: bool : Always true","title":"method TestResult.is_failure"},{"location":"api/result_manager.models/#method-testresultis_skipped","text":"is_skipped ( message : str = '' ) \u2192 bool Helper to set status to skipped Args: message (str): Optional message related to the test Returns: bool : Always true","title":"method TestResult.is_skipped"},{"location":"api/result_manager.models/#method-testresultis_success","text":"is_success ( message : str = '' ) \u2192 bool Helper to set status to success Args: message (str): Optional message related to the test Returns: bool : Always true","title":"method TestResult.is_success"},{"location":"api/result_manager.models/#classmethod-testresultname_must_be_in","text":"name_must_be_in ( v : str ) \u2192 str Status validator Validate status is a supported one Args: v (str): User defined status Raises: ValueError : If status is unsupported Returns: str : status value","title":"classmethod TestResult.name_must_be_in"},{"location":"api/result_manager.models/#class-listresult","text":"List result for all tests on all devices. Attributes: __root__ (List[TestResult]): A list of TestResult objects.","title":"class ListResult"},{"location":"api/result_manager.models/#method-listresultappend","text":"append ( value : result_manager . models . TestResult ) \u2192 None Add support for append method. This file was automatically generated via lazydocs .","title":"method ListResult.append"},{"location":"api/tests.configuration/","text":"module tests.configuration \u00b6 Test functions related to the device configuration function verify_zerotouch \u00b6 verify_zerotouch ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies ZeroTouch is disabled. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if ZTP is disabled * result = \u201cfailure\u201d if ZTP is enabled * result = \u201cerror\u201d if any exception is caught function verify_running_config_diffs \u00b6 verify_running_config_diffs ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no difference between the running-config and the startup-config. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no difference between the running-config and the startup-config * result = \u201cfailure\u201d if there are differences * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Configuration"},{"location":"api/tests.configuration/#module-testsconfiguration","text":"Test functions related to the device configuration","title":"module tests.configuration"},{"location":"api/tests.configuration/#function-verify_zerotouch","text":"verify_zerotouch ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies ZeroTouch is disabled. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if ZTP is disabled * result = \u201cfailure\u201d if ZTP is enabled * result = \u201cerror\u201d if any exception is caught","title":"function verify_zerotouch"},{"location":"api/tests.configuration/#function-verify_running_config_diffs","text":"verify_running_config_diffs ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no difference between the running-config and the startup-config. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no difference between the running-config and the startup-config * result = \u201cfailure\u201d if there are differences * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_running_config_diffs"},{"location":"api/tests.hardware/","text":"module tests.hardware \u00b6 Test functions related to the hardware or environement function verify_transceivers_manufacturers \u00b6 verify_transceivers_manufacturers ( device : anta . inventory . models . InventoryDevice , manufacturers : List [ str ] = None ) \u2192 TestResult Verifies the device is only using transceivers from supported manufacturers. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. manufacturers (list): List of allowed transceivers manufacturers. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the test was not executed because no manufacturers were given * result = \u201csuccess\u201d if the device is only using transceivers from supported manufacturers. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_system_temperature \u00b6 verify_system_temperature ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device temperature is currently OK and the device did not report any temperature alarm in the past. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device temperature is OK. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_transceiver_temperature \u00b6 verify_transceiver_temperature ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the transceivers temperature is currently OK and the device did not report any alarm in the past for its transceivers temperature. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device transceivers temperature of the device is currently OK AND the device did not report any alarm in the past for its transceivers temperature. * result = \u201cfailure\u201d otherwise, * result = \u201cerror\u201d if any exception is caught function verify_environment_cooling \u00b6 verify_environment_cooling ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the fans status is OK. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the fans status is OK. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_environment_power \u00b6 verify_environment_power ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the power supplies status is OK. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the power supplies status is OK. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_adverse_drops \u00b6 verify_adverse_drops ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no adverse drops on DCS-7280E and DCS-7500E switches. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device (DCS-7280E and DCS-7500E) doesnt reports adverse drops. * result = \u201cfailure\u201d if the device (DCS-7280E and DCS-7500E) report adverse drops. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Hardware"},{"location":"api/tests.hardware/#module-testshardware","text":"Test functions related to the hardware or environement","title":"module tests.hardware"},{"location":"api/tests.hardware/#function-verify_transceivers_manufacturers","text":"verify_transceivers_manufacturers ( device : anta . inventory . models . InventoryDevice , manufacturers : List [ str ] = None ) \u2192 TestResult Verifies the device is only using transceivers from supported manufacturers. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. manufacturers (list): List of allowed transceivers manufacturers. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the test was not executed because no manufacturers were given * result = \u201csuccess\u201d if the device is only using transceivers from supported manufacturers. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_transceivers_manufacturers"},{"location":"api/tests.hardware/#function-verify_system_temperature","text":"verify_system_temperature ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device temperature is currently OK and the device did not report any temperature alarm in the past. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device temperature is OK. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_system_temperature"},{"location":"api/tests.hardware/#function-verify_transceiver_temperature","text":"verify_transceiver_temperature ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the transceivers temperature is currently OK and the device did not report any alarm in the past for its transceivers temperature. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device transceivers temperature of the device is currently OK AND the device did not report any alarm in the past for its transceivers temperature. * result = \u201cfailure\u201d otherwise, * result = \u201cerror\u201d if any exception is caught","title":"function verify_transceiver_temperature"},{"location":"api/tests.hardware/#function-verify_environment_cooling","text":"verify_environment_cooling ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the fans status is OK. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the fans status is OK. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_environment_cooling"},{"location":"api/tests.hardware/#function-verify_environment_power","text":"verify_environment_power ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the power supplies status is OK. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the power supplies status is OK. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_environment_power"},{"location":"api/tests.hardware/#function-verify_adverse_drops","text":"verify_adverse_drops ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no adverse drops on DCS-7280E and DCS-7500E switches. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device (DCS-7280E and DCS-7500E) doesnt reports adverse drops. * result = \u201cfailure\u201d if the device (DCS-7280E and DCS-7500E) report adverse drops. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_adverse_drops"},{"location":"api/tests.interfaces/","text":"module tests.interfaces \u00b6 Test functions related to the device interfaces function verify_interface_utilization \u00b6 verify_interface_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies interfaces utilization is below 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if interfaces utilization is below 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_interface_errors \u00b6 verify_interface_errors ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies interfaces error counters are equal to zero. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if interfaces error counters are equal to zero. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_interface_discards \u00b6 verify_interface_discards ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies interfaces packet discard counters are equal to zero. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if interfaces discard counters are equal to zero. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_interface_errdisabled \u00b6 verify_interface_errdisabled ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no interface in error disable state. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if no interface is in error disable state. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_interfaces_status \u00b6 verify_interfaces_status ( device : anta . inventory . models . InventoryDevice , minimum : int = None ) \u2192 TestResult Verifies the number of Ethernet interfaces up/up on the device is higher or equal than a value. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. minimum (int): Expected minimum number of Ethernet interfaces up/up Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the minimum parameter is missing * result = \u201csuccess\u201d if the number of Ethernet interface up/up is >= minimum * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_storm_control_drops \u00b6 verify_storm_control_drops ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device did not drop packets due its to storm-control configuration. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device did not drop packet due to its storm-control configuration. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_portchannels \u00b6 verify_portchannels ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no inactive port in port channels. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no inactive ports in port-channels in particular \u201csuccess\u201d if there is no port-channel * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_illegal_lacp \u00b6 verify_illegal_lacp ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no illegal LACP packets received. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no illegal LACP packets received. in particular \u201csuccess\u201d if there is no port-channel * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_loopback_count \u00b6 verify_loopback_count ( device : anta . inventory . models . InventoryDevice , number : int = None ) \u2192 TestResult Verifies the number of loopback interfaces on the device is the one we expect. And if none of the loopback is down. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): Expected number of loopback interfaces. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the number of loopback is equal to number and if none of the loopback is down * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_svi \u00b6 verify_svi ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no interface vlan down. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if no SVI is down * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_spanning_tree_blocked_ports \u00b6 verify_spanning_tree_blocked_ports ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no spanning-tree blocked ports. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no spanning-tree blocked ports * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Interfaces"},{"location":"api/tests.interfaces/#module-testsinterfaces","text":"Test functions related to the device interfaces","title":"module tests.interfaces"},{"location":"api/tests.interfaces/#function-verify_interface_utilization","text":"verify_interface_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies interfaces utilization is below 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if interfaces utilization is below 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_interface_utilization"},{"location":"api/tests.interfaces/#function-verify_interface_errors","text":"verify_interface_errors ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies interfaces error counters are equal to zero. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if interfaces error counters are equal to zero. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_interface_errors"},{"location":"api/tests.interfaces/#function-verify_interface_discards","text":"verify_interface_discards ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies interfaces packet discard counters are equal to zero. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if interfaces discard counters are equal to zero. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_interface_discards"},{"location":"api/tests.interfaces/#function-verify_interface_errdisabled","text":"verify_interface_errdisabled ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no interface in error disable state. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if no interface is in error disable state. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_interface_errdisabled"},{"location":"api/tests.interfaces/#function-verify_interfaces_status","text":"verify_interfaces_status ( device : anta . inventory . models . InventoryDevice , minimum : int = None ) \u2192 TestResult Verifies the number of Ethernet interfaces up/up on the device is higher or equal than a value. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. minimum (int): Expected minimum number of Ethernet interfaces up/up Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the minimum parameter is missing * result = \u201csuccess\u201d if the number of Ethernet interface up/up is >= minimum * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_interfaces_status"},{"location":"api/tests.interfaces/#function-verify_storm_control_drops","text":"verify_storm_control_drops ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device did not drop packets due its to storm-control configuration. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device did not drop packet due to its storm-control configuration. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_storm_control_drops"},{"location":"api/tests.interfaces/#function-verify_portchannels","text":"verify_portchannels ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no inactive port in port channels. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no inactive ports in port-channels in particular \u201csuccess\u201d if there is no port-channel * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_portchannels"},{"location":"api/tests.interfaces/#function-verify_illegal_lacp","text":"verify_illegal_lacp ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no illegal LACP packets received. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no illegal LACP packets received. in particular \u201csuccess\u201d if there is no port-channel * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_illegal_lacp"},{"location":"api/tests.interfaces/#function-verify_loopback_count","text":"verify_loopback_count ( device : anta . inventory . models . InventoryDevice , number : int = None ) \u2192 TestResult Verifies the number of loopback interfaces on the device is the one we expect. And if none of the loopback is down. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): Expected number of loopback interfaces. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the number of loopback is equal to number and if none of the loopback is down * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_loopback_count"},{"location":"api/tests.interfaces/#function-verify_svi","text":"verify_svi ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no interface vlan down. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if no SVI is down * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_svi"},{"location":"api/tests.interfaces/#function-verify_spanning_tree_blocked_ports","text":"verify_spanning_tree_blocked_ports ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no spanning-tree blocked ports. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no spanning-tree blocked ports * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_spanning_tree_blocked_ports"},{"location":"api/tests/","text":"module tests \u00b6 This file was automatically generated via lazydocs .","title":"Tests"},{"location":"api/tests/#module-tests","text":"This file was automatically generated via lazydocs .","title":"module tests"},{"location":"api/tests.mlag/","text":"module tests.mlag \u00b6 Test functions related to Multi-Chassis LAG function verify_mlag_status \u00b6 verify_mlag_status ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the MLAG status: state is active, negotiation status is connected, local int is up, peer link is up. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the MLAG status is OK * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_mlag_interfaces \u00b6 verify_mlag_interfaces ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no inactive or active-partial MLAG interfaces. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no inactive or active-partial MLAG interfaces. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_mlag_config_sanity \u00b6 verify_mlag_config_sanity ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no MLAG config-sanity inconsistencies. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no MLAG config-sanity inconsistencies * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"MLAG"},{"location":"api/tests.mlag/#module-testsmlag","text":"Test functions related to Multi-Chassis LAG","title":"module tests.mlag"},{"location":"api/tests.mlag/#function-verify_mlag_status","text":"verify_mlag_status ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the MLAG status: state is active, negotiation status is connected, local int is up, peer link is up. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the MLAG status is OK * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_mlag_status"},{"location":"api/tests.mlag/#function-verify_mlag_interfaces","text":"verify_mlag_interfaces ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no inactive or active-partial MLAG interfaces. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no inactive or active-partial MLAG interfaces. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_mlag_interfaces"},{"location":"api/tests.mlag/#function-verify_mlag_config_sanity","text":"verify_mlag_config_sanity ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no MLAG config-sanity inconsistencies. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no MLAG config-sanity inconsistencies * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_mlag_config_sanity"},{"location":"api/tests.multicast/","text":"module tests.multicast \u00b6 Test functions related to multicast function verify_igmp_snooping_vlans \u00b6 verify_igmp_snooping_vlans ( device : anta . inventory . models . InventoryDevice , vlans : List [ str ], configuration : str ) \u2192 TestResult Verifies the IGMP snooping configuration for some VLANs. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. vlans (List[str]): A list of VLANs configuration (str): Expected IGMP snooping configuration (enabled or disabled) for these VLANs. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if IGMP snooping is configured on these vlans * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_igmp_snooping_global \u00b6 verify_igmp_snooping_global ( device : anta . inventory . models . InventoryDevice , configuration : str ) \u2192 TestResult Verifies the IGMP snooping global configuration. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. configuration (str): Expected global IGMP snooping configuration (enabled or disabled). Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the configuration parameter was missing * result = \u201csuccess\u201d if IGMP snooping is globally configured * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Multicast"},{"location":"api/tests.multicast/#module-testsmulticast","text":"Test functions related to multicast","title":"module tests.multicast"},{"location":"api/tests.multicast/#function-verify_igmp_snooping_vlans","text":"verify_igmp_snooping_vlans ( device : anta . inventory . models . InventoryDevice , vlans : List [ str ], configuration : str ) \u2192 TestResult Verifies the IGMP snooping configuration for some VLANs. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. vlans (List[str]): A list of VLANs configuration (str): Expected IGMP snooping configuration (enabled or disabled) for these VLANs. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if IGMP snooping is configured on these vlans * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_igmp_snooping_vlans"},{"location":"api/tests.multicast/#function-verify_igmp_snooping_global","text":"verify_igmp_snooping_global ( device : anta . inventory . models . InventoryDevice , configuration : str ) \u2192 TestResult Verifies the IGMP snooping global configuration. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. configuration (str): Expected global IGMP snooping configuration (enabled or disabled). Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the configuration parameter was missing * result = \u201csuccess\u201d if IGMP snooping is globally configured * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_igmp_snooping_global"},{"location":"api/tests.profiles/","text":"module tests.profiles \u00b6 Test functions related to ASIC profiles function verify_unified_forwarding_table_mode \u00b6 verify_unified_forwarding_table_mode ( device : anta . inventory . models . InventoryDevice , mode : str ) \u2192 TestResult Verifies the device is using the expected Unified Forwarding Table mode. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. mode (str): The expected Unified Forwarding Table mode. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cmode\u201d if the mode parameter is missing * result = \u201csuccess\u201d if UFT mode is correct * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_tcam_profile \u00b6 verify_tcam_profile ( device : anta . inventory . models . InventoryDevice , profile : str ) \u2192 TestResult Verifies the configured TCAM profile is the expected one. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. profile (str): The expected TCAM profile.0 Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cmode\u201d if the profile parameter is missing * result = \u201csuccess\u201d if TCAM profile is correct * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Profiles"},{"location":"api/tests.profiles/#module-testsprofiles","text":"Test functions related to ASIC profiles","title":"module tests.profiles"},{"location":"api/tests.profiles/#function-verify_unified_forwarding_table_mode","text":"verify_unified_forwarding_table_mode ( device : anta . inventory . models . InventoryDevice , mode : str ) \u2192 TestResult Verifies the device is using the expected Unified Forwarding Table mode. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. mode (str): The expected Unified Forwarding Table mode. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cmode\u201d if the mode parameter is missing * result = \u201csuccess\u201d if UFT mode is correct * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_unified_forwarding_table_mode"},{"location":"api/tests.profiles/#function-verify_tcam_profile","text":"verify_tcam_profile ( device : anta . inventory . models . InventoryDevice , profile : str ) \u2192 TestResult Verifies the configured TCAM profile is the expected one. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. profile (str): The expected TCAM profile.0 Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cmode\u201d if the profile parameter is missing * result = \u201csuccess\u201d if TCAM profile is correct * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_tcam_profile"},{"location":"api/tests.routing.bgp/","text":"module tests.routing.bgp \u00b6 BGP test functions function verify_bgp_ipv4_unicast_state \u00b6 verify_bgp_ipv4_unicast_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all IPv4 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP vrf are returned by the device * result = \u201csuccess\u201d if all IPv4 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_bgp_ipv4_unicast_count \u00b6 verify_bgp_ipv4_unicast_count ( device : anta . inventory . models . InventoryDevice , number : int , vrf : str = 'default' ) \u2192 TestResult Verifies all IPv4 unicast BGP sessions are established and all BGP messages queues for these sessions are empty and the actual number of BGP IPv4 unicast neighbors is the one we expect. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): Expected number of BGP IPv4 unicast neighbors vrf (str): VRF to verify. default is \u201cdefault\u201d. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the number or vrf parameter is missing * result = \u201csuccess\u201d if all IPv4 unicast BGP sessions are established and if all BGP messages queues for these sessions are empty and if the actual number of BGP IPv4 unicast neighbors is equal to `number. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_bgp_ipv6_unicast_state \u00b6 verify_bgp_ipv6_unicast_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all IPv6 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP vrf are returned by the device * result = \u201csuccess\u201d if all IPv6 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_bgp_evpn_state \u00b6 verify_bgp_evpn_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all EVPN BGP sessions are established (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP EVPN peers are returned by the device * result = \u201csuccess\u201d if all EVPN BGP sessions are established. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_bgp_evpn_count \u00b6 verify_bgp_evpn_count ( device : anta . inventory . models . InventoryDevice , number : int ) \u2192 TestResult Verifies all EVPN BGP sessions are established (default VRF) and the actual number of BGP EVPN neighbors is the one we expect (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): The expected number of BGP EVPN neighbors in the default VRF. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the number parameter is missing * result = \u201csuccess\u201d if all EVPN BGP sessions are Established and if the actual number of BGP EVPN neighbors is the one we expect. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_bgp_rtc_state \u00b6 verify_bgp_rtc_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all RTC BGP sessions are established (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP RTC peers are returned by the device * result = \u201csuccess\u201d if all RTC BGP sessions are Established. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_bgp_rtc_count \u00b6 verify_bgp_rtc_count ( device : anta . inventory . models . InventoryDevice , number : int ) \u2192 TestResult Verifies all RTC BGP sessions are established (default VRF) and the actual number of BGP RTC neighbors is the one we expect (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): The expected number of BGP RTC neighbors (default VRF). Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the number parameter is missing * result = \u201csuccess\u201d if all RTC BGP sessions are established and if the actual number of BGP RTC neighbors is the one we expect. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"BGP"},{"location":"api/tests.routing.bgp/#module-testsroutingbgp","text":"BGP test functions","title":"module tests.routing.bgp"},{"location":"api/tests.routing.bgp/#function-verify_bgp_ipv4_unicast_state","text":"verify_bgp_ipv4_unicast_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all IPv4 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP vrf are returned by the device * result = \u201csuccess\u201d if all IPv4 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_bgp_ipv4_unicast_state"},{"location":"api/tests.routing.bgp/#function-verify_bgp_ipv4_unicast_count","text":"verify_bgp_ipv4_unicast_count ( device : anta . inventory . models . InventoryDevice , number : int , vrf : str = 'default' ) \u2192 TestResult Verifies all IPv4 unicast BGP sessions are established and all BGP messages queues for these sessions are empty and the actual number of BGP IPv4 unicast neighbors is the one we expect. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): Expected number of BGP IPv4 unicast neighbors vrf (str): VRF to verify. default is \u201cdefault\u201d. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the number or vrf parameter is missing * result = \u201csuccess\u201d if all IPv4 unicast BGP sessions are established and if all BGP messages queues for these sessions are empty and if the actual number of BGP IPv4 unicast neighbors is equal to `number. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_bgp_ipv4_unicast_count"},{"location":"api/tests.routing.bgp/#function-verify_bgp_ipv6_unicast_state","text":"verify_bgp_ipv6_unicast_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all IPv6 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP vrf are returned by the device * result = \u201csuccess\u201d if all IPv6 unicast BGP sessions are established (for all VRF) and all BGP messages queues for these sessions are empty (for all VRF). * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_bgp_ipv6_unicast_state"},{"location":"api/tests.routing.bgp/#function-verify_bgp_evpn_state","text":"verify_bgp_evpn_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all EVPN BGP sessions are established (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP EVPN peers are returned by the device * result = \u201csuccess\u201d if all EVPN BGP sessions are established. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_bgp_evpn_state"},{"location":"api/tests.routing.bgp/#function-verify_bgp_evpn_count","text":"verify_bgp_evpn_count ( device : anta . inventory . models . InventoryDevice , number : int ) \u2192 TestResult Verifies all EVPN BGP sessions are established (default VRF) and the actual number of BGP EVPN neighbors is the one we expect (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): The expected number of BGP EVPN neighbors in the default VRF. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the number parameter is missing * result = \u201csuccess\u201d if all EVPN BGP sessions are Established and if the actual number of BGP EVPN neighbors is the one we expect. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_bgp_evpn_count"},{"location":"api/tests.routing.bgp/#function-verify_bgp_rtc_state","text":"verify_bgp_rtc_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all RTC BGP sessions are established (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if no BGP RTC peers are returned by the device * result = \u201csuccess\u201d if all RTC BGP sessions are Established. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_bgp_rtc_state"},{"location":"api/tests.routing.bgp/#function-verify_bgp_rtc_count","text":"verify_bgp_rtc_count ( device : anta . inventory . models . InventoryDevice , number : int ) \u2192 TestResult Verifies all RTC BGP sessions are established (default VRF) and the actual number of BGP RTC neighbors is the one we expect (default VRF). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): The expected number of BGP RTC neighbors (default VRF). Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the number parameter is missing * result = \u201csuccess\u201d if all RTC BGP sessions are established and if the actual number of BGP RTC neighbors is the one we expect. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_bgp_rtc_count"},{"location":"api/tests.routing.generic/","text":"module tests.routing.generic \u00b6 Generic routing test functions function verify_routing_protocol_model \u00b6 verify_routing_protocol_model ( device : anta . inventory . models . InventoryDevice , model : str = 'multi-agent' ) \u2192 TestResult Verifies the configured routing protocol model is the one we expect. And if there is no mismatch between the configured and operating routing protocol model. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. model (str): Expected routing protocol model (multi-agent or ribd). Default is multi-agent Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the test model parameter is missing * result = \u201csuccess\u201d if routing model is well configured * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_routing_table_size \u00b6 verify_routing_table_size ( device : anta . inventory . models . InventoryDevice , minimum : int , maximum : int ) \u2192 TestResult Verifies the size of the IP routing table (default VRF). Should be between the two provided thresholds. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. minimum (int): Expected minimum routing table (default VRF) size. maximum (int): Expected maximum routing table (default VRF) size. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the test minimum or maximum parameters are missing * result = \u201csuccess\u201d if routing-table size is correct * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_bfd \u00b6 verify_bfd ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no BFD peer in down state (all VRF, IPv4 neighbors). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if routing-table size is OK * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Generic"},{"location":"api/tests.routing.generic/#module-testsroutinggeneric","text":"Generic routing test functions","title":"module tests.routing.generic"},{"location":"api/tests.routing.generic/#function-verify_routing_protocol_model","text":"verify_routing_protocol_model ( device : anta . inventory . models . InventoryDevice , model : str = 'multi-agent' ) \u2192 TestResult Verifies the configured routing protocol model is the one we expect. And if there is no mismatch between the configured and operating routing protocol model. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. model (str): Expected routing protocol model (multi-agent or ribd). Default is multi-agent Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the test model parameter is missing * result = \u201csuccess\u201d if routing model is well configured * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_routing_protocol_model"},{"location":"api/tests.routing.generic/#function-verify_routing_table_size","text":"verify_routing_table_size ( device : anta . inventory . models . InventoryDevice , minimum : int , maximum : int ) \u2192 TestResult Verifies the size of the IP routing table (default VRF). Should be between the two provided thresholds. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. minimum (int): Expected minimum routing table (default VRF) size. maximum (int): Expected maximum routing table (default VRF) size. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the test minimum or maximum parameters are missing * result = \u201csuccess\u201d if routing-table size is correct * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_routing_table_size"},{"location":"api/tests.routing.generic/#function-verify_bfd","text":"verify_bfd ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no BFD peer in down state (all VRF, IPv4 neighbors). Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if routing-table size is OK * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_bfd"},{"location":"api/tests.routing/","text":"module tests.routing \u00b6 This file was automatically generated via lazydocs .","title":"Tests.routing"},{"location":"api/tests.routing/#module-testsrouting","text":"This file was automatically generated via lazydocs .","title":"module tests.routing"},{"location":"api/tests.routing.ospf/","text":"module tests.routing.ospf \u00b6 OSPF test functions function verify_ospf_state \u00b6 verify_ospf_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all OSPF neighbors are in FULL state. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if all OSPF neighbors are FULL. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_ospf_count \u00b6 verify_ospf_count ( device : anta . inventory . models . InventoryDevice , number : int ) \u2192 TestResult Verifies the number of OSPF neighbors in FULL state is the one we expect. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): The expected number of OSPF neighbors in FULL state. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipeed\u201d if the number parameter is missing * result = \u201csuccess\u201d if device has correct number of devices * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"OSPF"},{"location":"api/tests.routing.ospf/#module-testsroutingospf","text":"OSPF test functions","title":"module tests.routing.ospf"},{"location":"api/tests.routing.ospf/#function-verify_ospf_state","text":"verify_ospf_state ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all OSPF neighbors are in FULL state. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if all OSPF neighbors are FULL. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_ospf_state"},{"location":"api/tests.routing.ospf/#function-verify_ospf_count","text":"verify_ospf_count ( device : anta . inventory . models . InventoryDevice , number : int ) \u2192 TestResult Verifies the number of OSPF neighbors in FULL state is the one we expect. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. number (int): The expected number of OSPF neighbors in FULL state. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipeed\u201d if the number parameter is missing * result = \u201csuccess\u201d if device has correct number of devices * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_ospf_count"},{"location":"api/tests.software/","text":"module tests.software \u00b6 Test functions related to the EOS software function verify_eos_version \u00b6 verify_eos_version ( device : anta . inventory . models . InventoryDevice , versions : List [ str ] = None ) \u2192 TestResult Verifies the device is running one of the allowed EOS version. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. versions (list): List of allowed EOS versions. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the version parameter is missing * result = \u201csuccess\u201d if EOS version is valid against versions * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_terminattr_version \u00b6 verify_terminattr_version ( device : anta . inventory . models . InventoryDevice , versions : List [ str ] = None ) \u2192 TestResult Verifies the device is running one of the allowed TerminAttr version. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. versions (list): List of allowed TerminAttr versions. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the versions parameter is missing * result = \u201csuccess\u201d if TerminAttr version is valid against versions * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_eos_extensions \u00b6 verify_eos_extensions ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all EOS extensions installed on the device are enabled for boot persistence. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device has all installed its EOS extensions enabled for boot persistence. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_field_notice_44_resolution \u00b6 verify_field_notice_44_resolution ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device is using an Aboot version that fix the bug discussed in the field notice 44 (Aboot manages system settings prior to EOS initialization). https://www.arista.com/en/support/advisories-notices/field-notice/8756-field-notice-44 Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if aboot is running valid version * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Software"},{"location":"api/tests.software/#module-testssoftware","text":"Test functions related to the EOS software","title":"module tests.software"},{"location":"api/tests.software/#function-verify_eos_version","text":"verify_eos_version ( device : anta . inventory . models . InventoryDevice , versions : List [ str ] = None ) \u2192 TestResult Verifies the device is running one of the allowed EOS version. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. versions (list): List of allowed EOS versions. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the version parameter is missing * result = \u201csuccess\u201d if EOS version is valid against versions * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_eos_version"},{"location":"api/tests.software/#function-verify_terminattr_version","text":"verify_terminattr_version ( device : anta . inventory . models . InventoryDevice , versions : List [ str ] = None ) \u2192 TestResult Verifies the device is running one of the allowed TerminAttr version. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. versions (list): List of allowed TerminAttr versions. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the versions parameter is missing * result = \u201csuccess\u201d if TerminAttr version is valid against versions * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_terminattr_version"},{"location":"api/tests.software/#function-verify_eos_extensions","text":"verify_eos_extensions ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies all EOS extensions installed on the device are enabled for boot persistence. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if the device has all installed its EOS extensions enabled for boot persistence. * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_eos_extensions"},{"location":"api/tests.software/#function-verify_field_notice_44_resolution","text":"verify_field_notice_44_resolution ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device is using an Aboot version that fix the bug discussed in the field notice 44 (Aboot manages system settings prior to EOS initialization). https://www.arista.com/en/support/advisories-notices/field-notice/8756-field-notice-44 Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if aboot is running valid version * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_field_notice_44_resolution"},{"location":"api/tests.system/","text":"module tests.system \u00b6 Test functions related to system-level features and protocols function verify_uptime \u00b6 verify_uptime ( device : anta . inventory . models . InventoryDevice , minimum : int = None ) \u2192 TestResult Verifies the device uptime is higher than a value. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. minimum (int): Minimum uptime in seconds. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the minimum parameter is missing * result = \u201csuccess\u201d if uptime is greater than minimun * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_reload_cause \u00b6 verify_reload_cause ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the last reload of the device was requested by a user. Test considers the following messages as normal and will return success. Failure is for other messages * Reload requested by the user. * Reload requested after FPGA upgrade Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if reload cause is standard * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_coredump \u00b6 verify_coredump ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no core file. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if device has no core-dump * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_agent_logs \u00b6 verify_agent_logs ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no agent crash reported on the device. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no agent crash * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_syslog \u00b6 verify_syslog ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device had no syslog message with a severity of warning (or a more severe message) during the last 7 days. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if syslog has no WARNING message * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_cpu_utilization \u00b6 verify_cpu_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the CPU utilization is less than 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if CPU usage is lower than 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_memory_utilization \u00b6 verify_memory_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the memory utilization is less than 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if memory usage is lower than 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_filesystem_utilization \u00b6 verify_filesystem_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies each partition on the disk is used less than 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if disk is used less than 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_ntp \u00b6 verify_ntp ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies NTP is synchronised. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if synchronized with NTP server * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"System"},{"location":"api/tests.system/#module-testssystem","text":"Test functions related to system-level features and protocols","title":"module tests.system"},{"location":"api/tests.system/#function-verify_uptime","text":"verify_uptime ( device : anta . inventory . models . InventoryDevice , minimum : int = None ) \u2192 TestResult Verifies the device uptime is higher than a value. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. minimum (int): Minimum uptime in seconds. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201cskipped\u201d if the minimum parameter is missing * result = \u201csuccess\u201d if uptime is greater than minimun * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_uptime"},{"location":"api/tests.system/#function-verify_reload_cause","text":"verify_reload_cause ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the last reload of the device was requested by a user. Test considers the following messages as normal and will return success. Failure is for other messages * Reload requested by the user. * Reload requested after FPGA upgrade Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if reload cause is standard * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_reload_cause"},{"location":"api/tests.system/#function-verify_coredump","text":"verify_coredump ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no core file. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if device has no core-dump * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_coredump"},{"location":"api/tests.system/#function-verify_agent_logs","text":"verify_agent_logs ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no agent crash reported on the device. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if there is no agent crash * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_agent_logs"},{"location":"api/tests.system/#function-verify_syslog","text":"verify_syslog ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the device had no syslog message with a severity of warning (or a more severe message) during the last 7 days. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if syslog has no WARNING message * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_syslog"},{"location":"api/tests.system/#function-verify_cpu_utilization","text":"verify_cpu_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the CPU utilization is less than 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if CPU usage is lower than 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_cpu_utilization"},{"location":"api/tests.system/#function-verify_memory_utilization","text":"verify_memory_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the memory utilization is less than 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if memory usage is lower than 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_memory_utilization"},{"location":"api/tests.system/#function-verify_filesystem_utilization","text":"verify_filesystem_utilization ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies each partition on the disk is used less than 75%. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if disk is used less than 75% * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_filesystem_utilization"},{"location":"api/tests.system/#function-verify_ntp","text":"verify_ntp ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies NTP is synchronised. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if synchronized with NTP server * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_ntp"},{"location":"api/tests.vxlan/","text":"module tests.vxlan \u00b6 Test functions related to VXLAN function verify_vxlan \u00b6 verify_vxlan ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the interface vxlan 1 status is up/up. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if vxlan1 interface is UP UP * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught function verify_vxlan_config_sanity \u00b6 verify_vxlan_config_sanity ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no VXLAN config-sanity warnings. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if VXLAN config sanity is OK * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"Tests.vxlan"},{"location":"api/tests.vxlan/#module-testsvxlan","text":"Test functions related to VXLAN","title":"module tests.vxlan"},{"location":"api/tests.vxlan/#function-verify_vxlan","text":"verify_vxlan ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies the interface vxlan 1 status is up/up. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if vxlan1 interface is UP UP * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught","title":"function verify_vxlan"},{"location":"api/tests.vxlan/#function-verify_vxlan_config_sanity","text":"verify_vxlan_config_sanity ( device : anta . inventory . models . InventoryDevice ) \u2192 TestResult Verifies there is no VXLAN config-sanity warnings. Args: device (InventoryDevice): InventoryDevice instance containing all devices information. Returns: TestResult instance with * result = \u201cunset\u201d if the test has not been executed * result = \u201csuccess\u201d if VXLAN config sanity is OK * result = \u201cfailure\u201d otherwise. * result = \u201cerror\u201d if any exception is caught This file was automatically generated via lazydocs .","title":"function verify_vxlan_config_sanity"}]}