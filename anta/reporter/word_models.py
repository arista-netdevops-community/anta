# Copyright (c) 2023 Arista Networks, Inc.
# Use of this source code is governed by the Apache License 2.0
# that can be found in the LICENSE file.
"""
Word models management
"""

import datetime
from typing import List, Optional

from docx.shared import RGBColor
from pydantic import BaseModel, field_validator


class Color(BaseModel):
    """Color definition object."""

    hex: str

    def rgb(self) -> RGBColor:
        """Convert color frm HEX to RGB."""
        return RGBColor(*[int(self.hex.lstrip("#")[i: i + 2], 16) for i in (0, 2, 4)])  # fmt: skip


class Colors(BaseModel):
    """
    Color style definition.

    Link: https://htmlcolorcodes.com/
    """

    headers_table: Color = Color(hex="#1F618D")
    success: Color = Color(hex="#A9DFBF")
    failure: Color = Color(hex="#F5B7B1")
    error: Color = Color(hex="#E74C3C")
    skipped: Color = Color(hex="#EB984E")


class DocxStyle(BaseModel):
    """DOCX style defnition."""

    colors: Colors = Colors()
    font_colors: Colors = Colors(headers_table=Color(hex="#FFFFFF"))
    font_size_default: int = 9
    font_name: str = "Arial"
    table_style: str = "Table Grid"
    shade_errors: bool = False
    shade_success: bool = False
    shade_failure: bool = False


SUPPORTED_FEATURES = ["tests_description", "summary_per_test", "tests_per_device"]


class TextCover(BaseModel):
    """Report Cover page model."""

    title: str = "Network Ready for Use Report"
    subtitles: List[str] = [
        f"Generated by ANTA framework on {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}",
        """Sunt aliquip fugiat sit aliqua pariatur. Laboris qui eu ex minim cupidatat nulla ea consectetur consequat aute deserunt cupidatat.
Ullamco cupidatat eiusmod ut nisi id Lorem ad do voluptate. Quis laboris irure magna veniam tempor exercitation.
    """,
    ]


class TextSection(BaseModel):
    """Text Section model"""

    index: int
    header: str
    description: List[str] = [
        """
Pariatur veniam ad cupidatat magna velit proident incididunt nulla tempor. Magna irure sunt laborum cupidatat eu
voluptate magna ipsum non commodo exercitation cillum sunt ullamco. Ea ea consectetur incididunt officia cillum ad
laboris veniam non anim est. Consequat aliquip pariatur ullamco elit ad.

Ex quis exercitation cupidatat nostrud ut sit mollit velit do est dolor irure. Amet voluptate magna est occaecat
aliquip ex laboris velit. Consectetur veniam tempor est non laborum magna ullamco ex.
    """
    ]
    insert: Optional[str] = None
    break_after: bool = False

    @classmethod
    @field_validator("insert")
    def supported_options(cls, v: str) -> str:
        """Validate insert KW is for supported features only."""
        if v in SUPPORTED_FEATURES:
            raise ValueError(f"Not a supported data to insert: {v} not in {SUPPORTED_FEATURES}")
        return v


class TextInputs(BaseModel):
    """Model for Report structure."""

    cover: TextCover
    content: List[TextSection]
